name: CI - Simplified Working Pipeline

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

jobs:
  # Job 1: Frontend Build & Lint
  frontend-check:
    name: Frontend - Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Lint
        run: cd frontend && npm run lint
        continue-on-error: true

      - name: Build
        run: cd frontend && npm run build

  # Job 2: Backend Build & Lint
  backend-check:
    name: Backend - Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Type check
        run: cd backend && npm run type-check
        continue-on-error: true

      - name: Lint
        run: cd backend && npm run lint
        continue-on-error: true

      - name: Build
        run: cd backend && npm run build

  # Job 3: Backend Tests (with database)
  backend-tests:
    name: Backend - Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sports_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Run database migrations
        run: cd backend && npm run migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret_for_ci
          DISABLE_REDIS: true

      - name: Run tests (no coverage)
        run: cd backend && npm test -- --passWithNoTests --forceExit --maxWorkers=1 --bail
        timeout-minutes: 5
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret_for_ci
          DISABLE_REDIS: true
        continue-on-error: true

  # Job 4: Cerbos Policy Coverage
  cerbos-coverage:
    name: Cerbos - Policy Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Validate Cerbos policies
        run: cd backend && npm run cerbos:validate
        continue-on-error: true
        env:
          CI: true

  # Job 5: Security Audit
  security-check:
    name: Security - npm audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Audit backend
        run: cd backend && npm audit --audit-level=critical
        continue-on-error: true

      - name: Audit frontend
        run: cd frontend && npm audit --audit-level=critical
        continue-on-error: true

  # Job 6: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [frontend-check, backend-check, backend-tests, cerbos-coverage, security-check]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "üîç CI Pipeline Results:"
          echo "======================="
          echo "Frontend Build: ${{ needs.frontend-check.result }}"
          echo "Backend Build: ${{ needs.backend-check.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Cerbos Coverage: ${{ needs.cerbos-coverage.result }}"
          echo "Security Check: ${{ needs.security-check.result }}"
          echo "======================="

          if [ "${{ needs.frontend-check.result }}" == "failure" ] || [ "${{ needs.backend-check.result }}" == "failure" ]; then
            echo "‚ùå Build failed"
            exit 1
          fi

          echo "‚úÖ Core checks passed"
