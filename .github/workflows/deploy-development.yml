name: Deploy to Development

on:
  push:
    branches: [develop]
  workflow_dispatch: # Allow manual triggering

env:
  SERVER_HOST: 10.0.0.5
  CONTAINER_ID: 102
  DEPLOY_PATH: /root/SportsManager
  DOMAIN: dev.syncedsport.com

jobs:
  deploy-dev:
    name: Deploy to Dev Server
    runs-on: self-hosted

    steps:
      - name: Ensure SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Pull latest code on dev
        run: |
          echo "üì• Pulling latest code from develop branch..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }} && \
              git fetch --all && \
              git checkout develop && \
              git pull origin develop\
            '"

      - name: Check for migrations
        id: check_migrations
        run: |
          echo "üîç Checking for database migrations..."
          MIGRATION_COUNT=$(ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }} && \
              git diff HEAD~1 HEAD --name-only | grep -c \"backend/src/migrations/\" || echo 0\
            '")
          echo "has_migrations=$MIGRATION_COUNT" >> $GITHUB_OUTPUT

          if [ "$MIGRATION_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $MIGRATION_COUNT migration file(s) - will run migrations"
          else
            echo "‚úÖ No migrations detected"
          fi

      - name: Run database migrations
        if: steps.check_migrations.outputs.has_migrations != '0'
        run: |
          echo "üìä Running database migrations..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              docker exec sportsmanager-backend-dev sh -c \"cd /app && npx knex migrate:latest\"\
            '"
          echo "‚úÖ Migrations completed"

      - name: Rebuild dev containers
        run: |
          echo "üî® Rebuilding Docker containers..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }}/deployment && \
              docker compose -f docker-compose.dev.yml up -d --build\
            '"

      - name: Wait for services to stabilize
        run: |
          echo "‚è≥ Waiting for services to be healthy..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              for i in {1..30}; do \
                HEALTHY=\$(docker ps --format \"{{.Names}}: {{.Status}}\" | grep -c healthy || echo 0); \
                if [ \"\$HEALTHY\" -ge 2 ]; then \
                  echo \"‚úÖ Services are healthy\"; \
                  exit 0; \
                fi; \
                echo \"Waiting... (\$i/30)\"; \
                sleep 2; \
              done; \
              echo \"‚ö†Ô∏è Timeout waiting for healthy status\"; \
              docker ps --format \"table {{.Names}}\t{{.Status}}\"; \
            '"

      - name: Run health checks
        run: |
          echo "üîç Running health checks..."

          # Internal health checks
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              curl -f http://localhost:3002/health || exit 1 && \
              curl -f http://localhost:3005 || exit 1\
            '"

          # External health check via Cloudflare Tunnel
          sleep 5
          curl -f https://${{ env.DOMAIN }} || exit 1

          echo "‚úÖ All health checks passed"

      - name: Verify deployment
        run: |
          echo "üìä Development Deployment Summary:"
          echo "------------------------------------"
          echo "üåê Dev URL: https://${{ env.DOMAIN }}"
          echo "üì° API URL: https://${{ env.DOMAIN }}/api"
          echo "üîß Branch: develop"
          echo "üìù Commit: ${{ github.sha }}"
          echo ""
          echo "üê≥ Container Status:"
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              docker ps --format \"table {{.Names}}\t{{.Status}}\" | grep dev\
            '"

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Development deployment successful!"
          echo "üåê Live at: https://${{ env.DOMAIN }}"
          echo "üìÖ Deployed at: $(date)"
          echo "üîó Git commit: ${{ github.sha }}"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Development deployment failed - showing logs..."

          # Get logs for debugging
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }}/deployment && \
              docker compose -f docker-compose.dev.yml logs --tail=100\
            '"

          echo "üí° Tip: Check the logs above or visit GitHub Actions for details"
          exit 1
