name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false
      
      - name: Check for breaking changes
        run: |
          # Check if there are any breaking changes in the PR
          if git diff --name-only origin/main...HEAD | grep -E "migrations|schema"; then
            echo "⚠️ Database changes detected - ensure backward compatibility"
          fi
      
      - name: Validate commit messages
        run: |
          # Check that all commits follow conventional commit format
          git log --pretty=format:"%s" origin/main..HEAD | while read line; do
            if ! echo "$line" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?: .+"; then
              echo "❌ Invalid commit message: $line"
              echo "Please use conventional commit format: type(scope): description"
              exit 1
            fi
          done

  changed-files:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      database: ${{ steps.changes.outputs.database }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            database:
              - 'backend/migrations/**'
              - 'backend/seeds/**'
              - 'database-schema.sql'

  test-backend-changes:
    name: Test Backend Changes
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.backend == 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sports_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Run database migrations
        run: cd backend && npm run migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret
      
      - name: Run only affected backend tests
        run: cd backend && npm test -- --passWithNoTests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret

  test-frontend-changes:
    name: Test Frontend Changes
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Run frontend tests
        run: cd frontend && npm test -- --passWithNoTests --watchAll=false

  database-migration-check:
    name: Database Migration Safety Check
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.database == 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sports_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Test migration rollback safety
        run: |
          cd backend
          # Run all migrations
          npm run migrate
          
          # Get latest migration batch
          LATEST_BATCH=$(npx knex migrate:list | tail -1 | awk '{print $1}')
          
          # Test rollback (this should work without errors)
          npx knex migrate:rollback --batch=$LATEST_BATCH || {
            echo "❌ Migration rollback failed! This could cause deployment issues."
            exit 1
          }
          
          # Re-run migration to ensure it still works
          npm run migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret

  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Check for TODO/FIXME comments
        run: |
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 10 ]; then
            echo "⚠️ Too many TODO/FIXME comments ($TODO_COUNT). Please clean up before merging."
            grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .
          else
            echo "✅ TODO/FIXME count is acceptable ($TODO_COUNT)"
          fi
      
      - name: Check for console.log statements
        run: |
          CONSOLE_COUNT=$(grep -r "console\." --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules . | grep -v "console.error\|console.warn" | wc -l || echo "0")
          if [ "$CONSOLE_COUNT" -gt 0 ]; then
            echo "⚠️ Found console.log statements in code:"
            grep -r "console\." --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules . | grep -v "console.error\|console.warn"
            echo "Please remove console.log statements or replace with proper logging"
          else
            echo "✅ No inappropriate console statements found"
          fi

  comment-coverage:
    name: Comment Test Coverage
    runs-on: ubuntu-latest
    if: github.event.pull_request.number
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Run tests with coverage
        run: cd frontend && npm test -- --coverage --watchAll=false --passWithNoTests
      
      - name: Comment coverage results
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info