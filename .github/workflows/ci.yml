name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Lint frontend
        run: npm run lint
      
      - name: Type check and build frontend
        run: npm run build
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Lint backend (when available)
        run: cd backend && (npm run lint || echo "Backend lint not configured")

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sports_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Run database migrations
        run: cd backend && npm run migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret
      
      - name: Run backend tests with coverage
        run: cd backend && npm test -- --coverage --passWithNoTests --forceExit
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret
      
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: backend
          directory: ./backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run frontend tests with coverage
        run: npm test -- --coverage --passWithNoTests --watchAll=false
      
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: frontend

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit (frontend)
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Run security audit (backend)
        run: cd backend && npm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-backend, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Quality Gate Check
        run: |
          echo "âœ… All quality gates passed!"
          echo "- Lint & Type Check: Passed"
          echo "- Backend Tests: Passed" 
          echo "- Frontend Tests: Passed"
          echo "- Security Audit: Passed"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [quality-gates, security-audit]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "ðŸŽ‰ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Ready for deployment to staging/production"