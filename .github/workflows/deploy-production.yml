name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering with approval

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for breaking changes
        id: checks
        run: |
          # Check if there are any database migrations
          MIGRATION_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep "migrations/" | wc -l)
          
          # Check if there are any major version changes
          PACKAGE_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep "package.json" | wc -l)
          
          if [ "$MIGRATION_CHANGES" -gt 0 ]; then
            echo "‚ö†Ô∏è Database migrations detected - requires careful deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "$PACKAGE_CHANGES" -gt 0 ]; then
            echo "‚ö†Ô∏è Package.json changes detected - checking for breaking changes"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No breaking changes detected"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: Build and Test for Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sports_management_prod_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # Full test suite for production
      - name: Install and test frontend
        run: |
          npm ci
          npm run build
          npm test -- --coverage --watchAll=false
      
      - name: Install and test backend
        run: |
          cd backend
          npm ci
          npm run migrate
          npm test -- --coverage
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: sports_management_prod_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_production_secret
      
      - name: Security audit
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
      
      - name: Bundle analysis
        run: |
          npm run build
          # Check bundle size (example threshold)
          BUNDLE_SIZE=$(du -sk .next | cut -f1)
          if [ "$BUNDLE_SIZE" -gt 50000 ]; then
            echo "‚ö†Ô∏è Bundle size is large: ${BUNDLE_SIZE}KB"
            echo "Consider optimizing before production deployment"
          else
            echo "‚úÖ Bundle size acceptable: ${BUNDLE_SIZE}KB"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-test]
    environment: production # Requires manual approval
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # Backup current production (if applicable)
      - name: Create production backup
        run: |
          echo "üì¶ Creating production backup..."
          # Add backup commands here
          # Examples:
          # - Database backup
          # - File system backup
          # - Docker image backup
          echo "‚úÖ Backup completed"
      
      # Deploy with zero-downtime strategy
      - name: Deploy to production
        run: |
          echo "üöÄ Starting production deployment..."
          
          # Build production assets
          npm ci
          npm run build
          
          # Deploy backend
          cd backend
          npm ci
          
          # Run database migrations (production)
          echo "üìä Running database migrations..."
          npm run migrate
          
          echo "‚úÖ Production deployment initiated"
          # Add actual deployment commands:
          # - Blue-green deployment
          # - Rolling updates
          # - Container orchestration
          # - CDN cache invalidation
        env:
          NODE_ENV: production
          DB_HOST: ${{ secrets.PROD_DB_HOST }}
          DB_PORT: ${{ secrets.PROD_DB_PORT }}
          DB_NAME: ${{ secrets.PROD_DB_NAME }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
      
      # Health checks and smoke tests
      - name: Post-deployment health checks
        timeout-minutes: 10
        run: |
          echo "üîç Running production health checks..."
          
          # Wait for deployment to stabilize
          sleep 60
          
          # Health check endpoints
          # curl -f ${{ secrets.PROD_API_URL }}/health || exit 1
          # curl -f ${{ secrets.PROD_FRONTEND_URL }} || exit 1
          
          # Database connectivity test
          # Test critical API endpoints
          
          echo "‚úÖ All health checks passed"
      
      # Rollback mechanism (if health checks fail)
      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed - initiating rollback..."
          
          # Rollback database migrations (if safe)
          # cd backend && npx knex migrate:rollback --batch=1
          
          # Restore previous deployment
          # Restore from backup
          
          echo "üîÑ Rollback completed"
          exit 1

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Update deployment status
        run: |
          echo "üéâ Production deployment successful!"
          echo "üåê Production URL: ${{ secrets.PROD_FRONTEND_URL }}"
          echo "üì° API URL: ${{ secrets.PROD_API_URL }}"
          echo "üìÖ Deployed at: $(date)"
      
      - name: Notify team
        run: |
          # Send notifications (Slack, email, etc.)
          echo "üì¢ Notifying deployment team..."
          echo "‚úÖ Sports Management App deployed to production"
          
      - name: Update monitoring
        run: |
          # Update monitoring dashboards
          # Set up alerts for new deployment
          echo "üìä Monitoring updated for new deployment"