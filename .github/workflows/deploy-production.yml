name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  SERVER_HOST: 10.0.0.5
  CONTAINER_ID: 102
  DEPLOY_PATH: /root/SportsManager
  DOMAIN: syncedsport.com

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: self-hosted

    outputs:
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
      has-migrations: ${{ steps.checks.outputs.has-migrations }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for critical changes
        id: checks
        run: |
          # Check if there are any database migrations
          MIGRATION_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep -E "backend/src/migrations/" | wc -l || echo "0")

          # Check if there are any Docker changes
          DOCKER_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep -E "Dockerfile|docker-compose" | wc -l || echo "0")

          echo "has-migrations=$MIGRATION_CHANGES" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT

          if [ "$MIGRATION_CHANGES" -gt 0 ]; then
            echo "‚ö†Ô∏è Database migrations detected - will run migrations during deployment"
          fi

          if [ "$DOCKER_CHANGES" -gt 0 ]; then
            echo "üê≥ Docker configuration changes detected - will rebuild images"
          fi

  deploy-production:
    name: Deploy to Production (Proxmox CT102)
    runs-on: self-hosted
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'

    steps:
      - name: Ensure SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Create database backup
        run: |
          echo "üì¶ Creating database backup..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              mkdir -p ${{ env.DEPLOY_PATH }}/deployment/database-dumps/backups && \
              docker exec sportsmanager-backend sh -c \"cd /app && npx knex migrate:currentVersion\" && \
              docker exec -e PGPASSWORD=postgres123 sportsmanager-postgres pg_dump -U postgres -d sports_management -F c -f /tmp/backup_\$(date +%Y%m%d_%H%M%S).dump && \
              docker cp sportsmanager-postgres:/tmp/backup_\$(date +%Y%m%d_%H%M%S).dump ${{ env.DEPLOY_PATH }}/deployment/database-dumps/backups/\
            '"
          echo "‚úÖ Database backup created"

      - name: Pull latest code
        run: |
          echo "üì• Pulling latest code from main branch..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }} && \
              git fetch --all && \
              git checkout main && \
              git pull origin main\
            '"

      - name: Run database migrations
        if: needs.pre-deployment-checks.outputs.has-migrations != '0'
        run: |
          echo "üìä Running database migrations..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              docker exec sportsmanager-backend sh -c \"cd /app && npx knex migrate:latest\"\
            '"
          echo "‚úÖ Migrations completed"

      - name: Rebuild and restart services
        run: |
          echo "üî® Rebuilding Docker containers..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }}/deployment && \
              docker compose -f docker-compose.deploy.yml --env-file .env up -d --build\
            '"

      - name: Wait for services to stabilize
        run: |
          echo "‚è≥ Waiting for services to be healthy..."
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              for i in {1..60}; do \
                HEALTHY=\$(docker ps --format \"{{.Names}}: {{.Status}}\" | grep -c healthy || echo 0); \
                if [ \"\$HEALTHY\" -ge 2 ]; then \
                  echo \"‚úÖ Services are healthy\"; \
                  exit 0; \
                fi; \
                echo \"Waiting... (\$i/60)\"; \
                sleep 2; \
              done; \
              echo \"‚ö†Ô∏è Timeout waiting for healthy status\"; \
              docker ps --format \"table {{.Names}}\t{{.Status}}\"; \
            '"

      - name: Run health checks
        run: |
          echo "üîç Running health checks..."

          # Internal health checks
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              curl -f http://localhost:3001/health || exit 1 && \
              curl -f http://localhost:3004 || exit 1\
            '"

          # External health check via Cloudflare Tunnel
          sleep 10
          curl -f https://${{ env.DOMAIN }} || exit 1
          curl -f https://${{ env.DOMAIN }}/api/games | grep -q "data" || exit 1

          echo "‚úÖ All health checks passed"

      - name: Verify deployment
        run: |
          echo "üìä Deployment Summary:"
          echo "--------------------"
          echo "üåê Production URL: https://${{ env.DOMAIN }}"
          echo "üì° API URL: https://${{ env.DOMAIN }}/api"
          echo "üê≥ Container Status:"
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              docker ps --format \"table {{.Names}}\t{{.Status}}\"\
            '"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed - initiating rollback..."

          # Get logs for debugging
          ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
            "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
              cd ${{ env.DEPLOY_PATH }}/deployment && \
              docker compose -f docker-compose.deploy.yml logs --tail=100\
            '"

          # Optionally rollback to previous version
          # ssh -i ~/.ssh/id_rsa root@${{ env.SERVER_HOST }} \
          #   "pct exec ${{ env.CONTAINER_ID }} -- bash -c '\
          #     cd ${{ env.DEPLOY_PATH }} && \
          #     git checkout HEAD~1 && \
          #     cd deployment && \
          #     docker compose -f docker-compose.deploy.yml up -d --build\
          #   '"

          exit 1

  post-deployment:
    name: Post-deployment Tasks
    runs-on: self-hosted
    needs: deploy-production
    if: success()

    steps:
      - name: Deployment success notification
        run: |
          echo "üéâ Production deployment successful!"
          echo "üåê Live at: https://${{ env.DOMAIN }}"
          echo "üìÖ Deployed at: $(date)"
          echo "üîó Git commit: ${{ github.sha }}"