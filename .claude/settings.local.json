{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, organization FROM leagues LIMIT 3;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT COUNT(*) as total_teams, COUNT(DISTINCT league_id) as leagues_with_teams FROM teams;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, league_id FROM teams LIMIT 5;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\n-- Add parent_organization_id to organizations\nALTER TABLE organizations \n  ADD COLUMN IF NOT EXISTS parent_organization_id UUID REFERENCES organizations(id) ON DELETE RESTRICT;\n\n-- Add self-reference constraint\nALTER TABLE organizations \n  DROP CONSTRAINT IF EXISTS no_self_parent;\n\nALTER TABLE organizations \n  ADD CONSTRAINT no_self_parent \n  CHECK (parent_organization_id IS NULL OR parent_organization_id != id);\n\n-- Add organization_id to teams\nALTER TABLE teams \n  ADD COLUMN IF NOT EXISTS organization_id UUID REFERENCES organizations(id) ON DELETE SET NULL;\n\n-- Add organization_id to leagues\nALTER TABLE leagues \n  ADD COLUMN IF NOT EXISTS organization_id UUID REFERENCES organizations(id) ON DELETE SET NULL;\n\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\n-- Get default organization ID\nDO $$\nDECLARE\n  default_org_id UUID;\nBEGIN\n  SELECT id INTO default_org_id FROM organizations WHERE slug = ''default'' LIMIT 1;\n  \n  -- Update all teams to use default organization\n  UPDATE teams SET organization_id = default_org_id WHERE organization_id IS NULL;\n  \n  -- Update all leagues to use default organization  \n  UPDATE leagues SET organization_id = default_org_id WHERE organization_id IS NULL;\n  \n  RAISE NOTICE ''Updated teams and leagues with organization_id: %'', default_org_id;\nEND $$;\n\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\n-- Add indexes\nCREATE INDEX IF NOT EXISTS idx_organizations_parent ON organizations(parent_organization_id);\nCREATE INDEX IF NOT EXISTS idx_teams_organization ON teams(organization_id);\nCREATE INDEX IF NOT EXISTS idx_leagues_organization ON leagues(organization_id);\n\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d organizations\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d teams\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d leagues\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''teams'' AND column_name IN (''organization_id'', ''league_id'');\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''leagues'' AND column_name IN (''organization_id'', ''organization'');\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT COUNT(*) as teams_with_org FROM teams WHERE organization_id IS NOT NULL;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT COUNT(*) as leagues_with_org FROM leagues WHERE organization_id IS NOT NULL;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, description FROM roles ORDER BY name;\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIzYjViOTRmMy1hNzAwLTRjNTktYTI5Ny01ZGNiNTQzZDM3MmQiLCJlbWFpbCI6ImFkbWluQHJlZmFzc2lnbi5jb20iLCJyb2xlcyI6WyJTdXBlciBBZG1pbiIsIkFkbWluIl0sImlhdCI6MTc1OTA4NzUwOCwiZXhwIjoxNzU5NjkyMzA4fQ.lbtaKccoXuz8P6JgoeJgx7-08dTN7Zw6m39mO4VVHA4\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, description FROM roles WHERE name = ''Testing123'';\")",
      "Bash(npm run build:*)",
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(npx ts-node --transpile-only -e \"const routes = require(''./src/routes/admin/unified-roles''); console.log(''Routes imported:'', routes.default ? ''success'' : ''failed'');\")",
      "Bash(pkill:*)",
      "Bash(lsof:*)",
      "Bash(taskkill:*)",
      "Bash(npm run dev:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name FROM roles WHERE name = ''Testing123'' OR name = ''BasicTestRole'';\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, code FROM roles ORDER BY name LIMIT 10;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name FROM roles ORDER BY name LIMIT 10;\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d roles\")",
      "Bash(npm run migrate:*)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT id, name, code FROM roles ORDER BY name LIMIT 15;\")",
      "Bash(cat:*)",
      "Bash(node:*)",
      "Bash(nc localhost 3001)",
      "Bash(wmic process:*)",
      "Bash(del backendtest-roles-api.js)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(rm:*)",
      "Bash(cerbos server:*)",
      "Bash(docker ps:*)",
      "Bash(docker logs:*)",
      "Bash(mv:*)",
      "Bash(docker restart:*)",
      "Bash(docker inspect:*)",
      "Bash(docker-compose up:*)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT u.email, r.name, r.code FROM users u JOIN user_roles ur ON u.id = ur.user_id JOIN roles r ON ur.role_id = r.id WHERE u.email = ''admin@refassign.com'';\")",
      "Bash(tree:*)",
      "Bash(awk:*)",
      "Bash(./config/docker/docker-start.bat)",
      "Bash(docker-compose:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(tasklist)",
      "Bash(git log:*)",
      "Bash(git push:*)",
      "Bash(docker exec:*)",
      "Bash(docker run:*)",
      "Bash(docker start:*)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\dt\")"
    ],
    "deny": [],
    "ask": []
  }
}