{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\nALTER TABLE game_assignments \n  ADD COLUMN IF NOT EXISTS decline_reason TEXT,\n  ADD COLUMN IF NOT EXISTS decline_category VARCHAR(100);\n\nCREATE INDEX IF NOT EXISTS game_assignments_decline_category_index \n  ON game_assignments(decline_category);\n\nCOMMENT ON COLUMN game_assignments.decline_reason IS ''Reason provided by referee for declining assignment'';\nCOMMENT ON COLUMN game_assignments.decline_category IS ''Categorized decline reason: unavailable, conflict, distance, level, other'';\n\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d game_assignments\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"SELECT column_name, data_type, character_maximum_length FROM information_schema.columns WHERE table_name = ''game_assignments'' AND column_name IN (''decline_reason'', ''decline_category'') ORDER BY column_name;\")",
      "Bash(timeout 5 docker info)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout 60 npm run build)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\nALTER TABLE game_assignments \n  ADD COLUMN IF NOT EXISTS reminder_sent_at TIMESTAMP;\n\nCREATE INDEX IF NOT EXISTS game_assignments_reminder_sent_at_index \n  ON game_assignments(reminder_sent_at);\n\")",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -f backend/migrations/20250930_create_notifications.js)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\":*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Add responsive column visibility with auto-calculation for Teams & Locations tables\n\n- Add maxVisibleColumns prop to FilterableTable component\n  - Supports ''auto'' mode to calculate max columns based on screen width\n  - Supports fixed number for manual column limits\n  - Formula: (screenWidth - 100px) / columnWidthEstimate\n  - Min 3 columns, max 12 columns enforced\n\n- Implement column width estimation for optimal display\n  - Teams table: 180px average column width\n  - Locations table: 160px average column width\n\n- Add priority system for column visibility\n  - Protected columns (actions, filterType: ''none'') always visible\n  - Explicitly visible columns in initialColumnVisibility prioritized\n  - Auto-hide less important columns when limit exceeded\n\n- Fix responsive column visibility persistence\n  - Responsive settings now override localStorage\n  - User manual changes still saved to localStorage\n  - Window resize triggers automatic column adjustment\n\n- Fix Team column text stacking issue\n  - Add whitespace-nowrap to prevent text wrapping within segments\n  - Add flex-wrap to allow segments to wrap as complete units\n  - Add proper text truncation for team names\n\n- Separate responsive visibility configs for Teams and Locations\n  - Teams: Hide organization, age_group, gender, rank, contact_phone, game_count, level on tablet\n  - Locations: Hide capacity, contact, facilities, rate on tablet\n  - Progressive disclosure as screen size increases\n\nBenefits:\n- Tables automatically fit screen width without horizontal scrolling\n- Users can still manually toggle columns via View button\n- Smooth responsive behavior across all device sizes\n- Better UX on smaller screens while maintaining functionality\nEOF\n)\")",
      "Bash(gh run list:*)",
      "Bash(winget install:*)",
      "Bash(choco install:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Make table column visibility responsive to sidebar collapse/expand\n\n- Add custom event ''sidebar-state-changed'' to sidebar component\n  - Dispatched when sidebar opens or closes\n  - Contains sidebar state in event detail\n\n- Update FilterableTable to listen for sidebar state changes\n  - Track availableWidth state that responds to window resize\n  - Listen for ''sidebar-state-changed'' event\n  - Recalculate column visibility after sidebar animation (300ms delay)\n  - Automatic column adjustment when sidebar toggles\n\n- Add dual-trigger column recalculation\n  - Recalculate on initialColumnVisibility changes\n  - Recalculate on availableWidth changes when maxVisibleColumns is ''auto''\n  - Prevents infinite loops with JSON comparison\n\nBenefits:\n- Tables now adapt to sidebar collapse/expand in real-time\n- More columns shown when sidebar is collapsed (more horizontal space)\n- Fewer columns shown when sidebar is expanded (less horizontal space)\n- Smooth transition after sidebar animation completes\n- Works seamlessly with window resize and responsive breakpoints\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(test:*)",
      "Bash(grep:*)",
      "Bash(timeout 30 npm run lint)",
      "Read(//c/**)",
      "Bash(npx next lint:*)",
      "Bash(echo:*)",
      "Bash(timeout 30 npm test -- --passWithNoTests --forceExit --maxWorkers=1 --bail)",
      "Bash(timeout 20 npm test -- --verbose --passWithNoTests --forceExit --maxWorkers=1)",
      "Bash(PGPASSWORD=postgres123 \"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -c \"SELECT 1\")",
      "Bash(tasklist)",
      "Bash(export PGPASSWORD=postgres123)",
      "Bash(\"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -c \"SELECT 1\")",
      "Bash(\"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d leagues\")",
      "Bash(timeout 60 npm test -- leagues.integration.test.ts --forceExit --maxWorkers=1)",
      "Bash(taskkill:*)",
      "Bash(\"/c/Program Files/PostgreSQL/17/bin/psql\" -U postgres -h localhost -d sports_management -c \"\\d teams\")",
      "Bash(timeout 60 npm test -- --passWithNoTests --forceExit --maxWorkers=1)",
      "Bash(npx tsc:*)",
      "Bash(git push:*)"
    ],
    "deny": [],
    "ask": []
  }
}