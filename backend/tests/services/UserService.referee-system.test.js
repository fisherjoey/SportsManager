/**\n * Unit tests for UserService referee system functionality\n * Tests the new level system (Rookie/Junior/Senior) and white whistle logic\n */\n\nconst UserService = require('../../src/services/UserService');\nconst { setupTestDatabase, cleanupTestDatabase } = require('../helpers/test-helpers');\n\ndescribe('UserService - Referee System', () => {\n  let db;\n  let userService;\n  \n  beforeAll(async () => {\n    db = await setupTestDatabase();\n    userService = new UserService(db);\n  });\n  \n  afterAll(async () => {\n    await cleanupTestDatabase(db);\n  });\n  \n  beforeEach(async () => {\n    // Clean up data before each test\n    await db('user_referee_roles').del();\n    await db('users').where('role', 'referee').del();\n  });\n  \n  describe('White Whistle Display Logic', () => {\n    test('should display white whistle for Rookie level (always)', () => {\n      const result = userService.shouldDisplayWhiteWhistle('Rookie', false);\n      expect(result).toBe(true);\n      \n      const resultWithFlag = userService.shouldDisplayWhiteWhistle('Rookie', true);\n      expect(resultWithFlag).toBe(true);\n    });\n    \n    test('should conditionally display white whistle for Junior level', () => {\n      const resultWithoutFlag = userService.shouldDisplayWhiteWhistle('Junior', false);\n      expect(resultWithoutFlag).toBe(false);\n      \n      const resultWithFlag = userService.shouldDisplayWhiteWhistle('Junior', true);\n      expect(resultWithFlag).toBe(true);\n    });\n    \n    test('should never display white whistle for Senior level', () => {\n      const result = userService.shouldDisplayWhiteWhistle('Senior', false);\n      expect(result).toBe(false);\n      \n      const resultWithFlag = userService.shouldDisplayWhiteWhistle('Senior', true);\n      expect(resultWithFlag).toBe(false);\n    });\n    \n    test('should return false for invalid/unknown levels', () => {\n      expect(userService.shouldDisplayWhiteWhistle('Unknown', false)).toBe(false);\n      expect(userService.shouldDisplayWhiteWhistle(null, true)).toBe(false);\n      expect(userService.shouldDisplayWhiteWhistle('', true)).toBe(false);\n    });\n    \n    test('should handle case-insensitive level names', () => {\n      expect(userService.shouldDisplayWhiteWhistle('rookie', false)).toBe(true);\n      expect(userService.shouldDisplayWhiteWhistle('JUNIOR', true)).toBe(true);\n      expect(userService.shouldDisplayWhiteWhistle('senior', true)).toBe(false);\n    });\n  });\n  \n  describe('Referee Level Updates', () => {\n    let testReferee;\n    \n    beforeEach(async () => {\n      // Create a test referee\n      testReferee = await userService.createReferee({\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        postal_code: 'T1A1A1',\n        password: 'testpassword123'\n      });\n    });\n    \n    test('should update referee level to Rookie with white whistle', async () => {\n      const updated = await userService.updateRefereeLevel(testReferee.id, 'Rookie');\n      \n      expect(updated.new_referee_level).toBe('Rookie');\n      expect(updated.is_white_whistle).toBe(true); // Always true for Rookie\n    });\n    \n    test('should update referee level to Junior with conditional white whistle', async () => {\n      const updatedWithoutFlag = await userService.updateRefereeLevel(testReferee.id, 'Junior', false);\n      expect(updatedWithoutFlag.new_referee_level).toBe('Junior');\n      expect(updatedWithoutFlag.is_white_whistle).toBe(false);\n      \n      const updatedWithFlag = await userService.updateRefereeLevel(testReferee.id, 'Junior', true);\n      expect(updatedWithFlag.new_referee_level).toBe('Junior');\n      expect(updatedWithFlag.is_white_whistle).toBe(true);\n    });\n    \n    test('should update referee level to Senior without white whistle', async () => {\n      const updated = await userService.updateRefereeLevel(testReferee.id, 'Senior', true);\n      \n      expect(updated.new_referee_level).toBe('Senior');\n      expect(updated.is_white_whistle).toBe(false); // Always false for Senior\n    });\n    \n    test('should throw error for invalid level', async () => {\n      await expect(\n        userService.updateRefereeLevel(testReferee.id, 'InvalidLevel')\n      ).rejects.toThrow('Invalid referee level');\n    });\n    \n    test('should throw error for non-existent referee', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      await expect(\n        userService.updateRefereeLevel(fakeId, 'Junior')\n      ).rejects.toThrow('User not found');\n    });\n    \n    test('should update referee_level_id to match new level', async () => {\n      const rookieLevel = await db('referee_levels').where('name', 'Rookie').first();\n      const updated = await userService.updateRefereeLevel(testReferee.id, 'Rookie');\n      \n      expect(updated.referee_level_id).toBe(rookieLevel.id);\n    });\n  });\n  \n  describe('Referee Role Management', () => {\n    let testReferee;\n    let adminUser;\n    let evaluatorRole;\n    \n    beforeEach(async () => {\n      // Create test referee and admin\n      testReferee = await userService.createReferee({\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        postal_code: 'T1A1A1',\n        password: 'testpassword123'\n      });\n      \n      adminUser = await userService.create({\n        name: 'Test Admin',\n        email: 'admin@test.com',\n        password_hash: 'hashed_password',\n        role: 'admin'\n      });\n      \n      evaluatorRole = await db('referee_roles').where('name', 'Evaluator').first();\n    });\n    \n    test('should assign role to referee', async () => {\n      const assignment = await userService.assignRefereeRole(\n        testReferee.id, \n        'Evaluator', \n        adminUser.id\n      );\n      \n      expect(assignment).toBeDefined();\n      expect(assignment.user_id).toBe(testReferee.id);\n      expect(assignment.referee_role_id).toBe(evaluatorRole.id);\n      expect(assignment.assigned_by).toBe(adminUser.id);\n      expect(assignment.is_active).toBe(true);\n    });\n    \n    test('should prevent duplicate role assignments', async () => {\n      await userService.assignRefereeRole(testReferee.id, 'Evaluator', adminUser.id);\n      \n      await expect(\n        userService.assignRefereeRole(testReferee.id, 'Evaluator', adminUser.id)\n      ).rejects.toThrow('already has role');\n    });\n    \n    test('should remove role from referee', async () => {\n      await userService.assignRefereeRole(testReferee.id, 'Evaluator', adminUser.id);\n      \n      const success = await userService.removeRefereeRole(testReferee.id, 'Evaluator');\n      expect(success).toBe(true);\n      \n      // Verify role is deactivated\n      const assignment = await db('user_referee_roles')\n        .where('user_id', testReferee.id)\n        .where('referee_role_id', evaluatorRole.id)\n        .first();\n      \n      expect(assignment.is_active).toBe(false);\n    });\n    \n    test('should return false when removing non-existent role', async () => {\n      const success = await userService.removeRefereeRole(testReferee.id, 'Evaluator');\n      expect(success).toBe(false);\n    });\n    \n    test('should throw error when assigning role to non-referee', async () => {\n      await expect(\n        userService.assignRefereeRole(adminUser.id, 'Evaluator', adminUser.id)\n      ).rejects.toThrow('not a referee');\n    });\n    \n    test('should throw error when assigning non-existent role', async () => {\n      await expect(\n        userService.assignRefereeRole(testReferee.id, 'NonExistentRole', adminUser.id)\n      ).rejects.toThrow('not found');\n    });\n  });\n  \n  describe('Enhanced Referee Data', () => {\n    let testReferee;\n    \n    beforeEach(async () => {\n      testReferee = await userService.createReferee({\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        postal_code: 'T1A1A1',\n        password: 'testpassword123'\n      });\n      \n      // Set referee to Junior level with white whistle\n      await userService.updateRefereeLevel(testReferee.id, 'Junior', true);\n    });\n    \n    test('should enhance referee data with white whistle logic and roles', async () => {\n      const enhanced = await userService.enhanceRefereeData(testReferee);\n      \n      expect(enhanced).toHaveProperty('should_display_white_whistle');\n      expect(enhanced).toHaveProperty('referee_roles');\n      expect(enhanced).toHaveProperty('role_names');\n      expect(enhanced).toHaveProperty('can_evaluate');\n      expect(enhanced).toHaveProperty('can_mentor');\n      \n      // Should have default Referee role\n      expect(enhanced.role_names).toContain('Referee');\n    });\n    \n    test('should calculate white whistle display correctly', async () => {\n      // Test Junior with white whistle flag\n      testReferee.new_referee_level = 'Junior';\n      testReferee.is_white_whistle = true;\n      \n      const enhanced = await userService.enhanceRefereeData(testReferee);\n      expect(enhanced.should_display_white_whistle).toBe(true);\n    });\n    \n    test('should determine permissions from roles', async () => {\n      // Assign Evaluator role\n      const adminUser = await userService.create({\n        name: 'Admin',\n        email: 'admin@test.com',\n        password_hash: 'hashed',\n        role: 'admin'\n      });\n      \n      await userService.assignRefereeRole(testReferee.id, 'Evaluator', adminUser.id);\n      \n      const enhanced = await userService.enhanceRefereeData(testReferee);\n      expect(enhanced.can_evaluate).toBe(true);\n      expect(enhanced.role_names).toContain('Evaluator');\n    });\n    \n    test('should handle errors gracefully', async () => {\n      // Mock a database error by using an invalid user ID\n      const invalidUser = { id: 'invalid-id' };\n      \n      const enhanced = await userService.enhanceRefereeData(invalidUser);\n      \n      // Should return safe defaults\n      expect(enhanced.should_display_white_whistle).toBe(false);\n      expect(enhanced.referee_roles).toEqual([]);\n      expect(enhanced.role_names).toEqual([]);\n      expect(enhanced.can_evaluate).toBe(false);\n      expect(enhanced.can_mentor).toBe(false);\n    });\n  });\n  \n  describe('Find Referees by Role with Enhancement', () => {\n    let testReferees;\n    \n    beforeEach(async () => {\n      // Create multiple test referees with different levels\n      testReferees = [];\n      \n      for (let i = 0; i < 3; i++) {\n        const referee = await userService.createReferee({\n          name: `Test Referee ${i + 1}`,\n          email: `test${i + 1}@referee.com`,\n          postal_code: 'T1A1A1',\n          password: 'testpassword123'\n        });\n        \n        testReferees.push(referee);\n      }\n      \n      // Set different levels\n      await userService.updateRefereeLevel(testReferees[0].id, 'Rookie');\n      await userService.updateRefereeLevel(testReferees[1].id, 'Junior', true);\n      await userService.updateRefereeLevel(testReferees[2].id, 'Senior');\n    });\n    \n    test('should return enhanced referee data for all referees', async () => {\n      const referees = await userService.findByRole('referee');\n      \n      expect(referees).toHaveLength(3);\n      \n      referees.forEach(referee => {\n        expect(referee).toHaveProperty('should_display_white_whistle');\n        expect(referee).toHaveProperty('referee_roles');\n        expect(referee).toHaveProperty('role_names');\n        expect(referee).toHaveProperty('can_evaluate');\n        expect(referee).toHaveProperty('can_mentor');\n      });\n    });\n    \n    test('should apply correct white whistle logic for different levels', async () => {\n      const referees = await userService.findByRole('referee');\n      \n      const rookie = referees.find(r => r.new_referee_level === 'Rookie');\n      const junior = referees.find(r => r.new_referee_level === 'Junior');\n      const senior = referees.find(r => r.new_referee_level === 'Senior');\n      \n      expect(rookie.should_display_white_whistle).toBe(true);\n      expect(junior.should_display_white_whistle).toBe(true); // Has flag set\n      expect(senior.should_display_white_whistle).toBe(false);\n    });\n  });\n  \n  describe('Referee Creation with Defaults', () => {\n    test('should assign default Referee role on creation', async () => {\n      const referee = await userService.createReferee({\n        name: 'New Referee',\n        email: 'new@referee.com',\n        postal_code: 'T1A1A1',\n        password: 'testpassword123'\n      });\n      \n      // Check that default role was assigned\n      const roles = await db('user_referee_roles')\n        .join('referee_roles', 'user_referee_roles.referee_role_id', 'referee_roles.id')\n        .where('user_referee_roles.user_id', referee.id)\n        .where('user_referee_roles.is_active', true)\n        .select('referee_roles.name');\n      \n      expect(roles).toHaveLength(1);\n      expect(roles[0].name).toBe('Referee');\n    });\n    \n    test('should handle role assignment failure gracefully', async () => {\n      // This test ensures that referee creation doesn't fail even if role assignment fails\n      // We can't easily mock the role assignment failure, but the logic is there\n      const referee = await userService.createReferee({\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        postal_code: 'T1A1A1',\n        password: 'testpassword123'\n      });\n      \n      expect(referee).toBeDefined();\n      expect(referee.role).toBe('referee');\n    });\n  });\n});"