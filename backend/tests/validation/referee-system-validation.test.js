/**\n * Validation tests for the new referee system\n * Tests validation schemas and error handling for new fields\n */\n\nconst Joi = require('joi');\nconst { UserSchemas, RefereeSchemas } = require('../../src/utils/validation-schemas');\n\ndescribe('Referee System Validation', () => {\n  describe('UserSchemas validation', () => {\n    describe('create schema', () => {\n      test('should validate referee creation with new level system', () => {\n        const validData = {\n          name: 'Test Referee',\n          email: 'test@referee.com',\n          password: 'testpassword123',\n          phone: '+1234567890',\n          postal_code: 'T1A1A1',\n          new_referee_level: 'Junior',\n          is_white_whistle: true\n        };\n        \n        const { error, value } = UserSchemas.create.validate(validData);\n        expect(error).toBeUndefined();\n        expect(value.new_referee_level).toBe('Junior');\n        expect(value.is_white_whistle).toBe(true);\n      });\n      \n      test('should reject invalid referee levels', () => {\n        const invalidData = {\n          name: 'Test Referee',\n          email: 'test@referee.com',\n          password: 'testpassword123',\n          postal_code: 'T1A1A1',\n          new_referee_level: 'InvalidLevel'\n        };\n        \n        const { error } = UserSchemas.create.validate(invalidData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('must be one of');\n      });\n      \n      test('should accept valid referee levels', () => {\n        const levels = ['Rookie', 'Junior', 'Senior'];\n        \n        levels.forEach(level => {\n          const data = {\n            name: 'Test Referee',\n            email: 'test@referee.com',\n            password: 'testpassword123',\n            postal_code: 'T1A1A1',\n            new_referee_level: level\n          };\n          \n          const { error } = UserSchemas.create.validate(data);\n          expect(error).toBeUndefined();\n        });\n      });\n      \n      test('should validate postal code format', () => {\n        const validPostalCodes = ['T1A1A1', 'K1A 0A1', '12345', '12345-6789'];\n        \n        validPostalCodes.forEach(postalCode => {\n          const data = {\n            name: 'Test Referee',\n            email: 'test@referee.com',\n            password: 'testpassword123',\n            postal_code: postalCode\n          };\n          \n          const { error } = UserSchemas.create.validate(data);\n          expect(error).toBeUndefined();\n        });\n      });\n      \n      test('should reject invalid postal codes', () => {\n        const invalidPostalCodes = ['', 'A', '12', '12345678901'];\n        \n        invalidPostalCodes.forEach(postalCode => {\n          const data = {\n            name: 'Test Referee',\n            email: 'test@referee.com',\n            password: 'testpassword123',\n            postal_code: postalCode\n          };\n          \n          const { error } = UserSchemas.create.validate(data);\n          expect(error).toBeDefined();\n        });\n      });\n    });\n    \n    describe('update schema', () => {\n      test('should allow updating referee level', () => {\n        const updateData = {\n          new_referee_level: 'Senior',\n          is_white_whistle: false\n        };\n        \n        const { error, value } = UserSchemas.update.validate(updateData);\n        expect(error).toBeUndefined();\n        expect(value.new_referee_level).toBe('Senior');\n        expect(value.is_white_whistle).toBe(false);\n      });\n      \n      test('should validate optional fields', () => {\n        const updateData = {\n          name: 'Updated Name',\n          phone: '+1987654321',\n          postal_code: 'K1A0A1',\n          max_distance: 50,\n          is_available: false\n        };\n        \n        const { error } = UserSchemas.update.validate(updateData);\n        expect(error).toBeUndefined();\n      });\n    });\n    \n    describe('levelUpdate schema', () => {\n      test('should validate level update request', () => {\n        const levelUpdateData = {\n          new_referee_level: 'Junior',\n          is_white_whistle: true\n        };\n        \n        const { error, value } = UserSchemas.levelUpdate.validate(levelUpdateData);\n        expect(error).toBeUndefined();\n        expect(value.new_referee_level).toBe('Junior');\n        expect(value.is_white_whistle).toBe(true);\n      });\n      \n      test('should require new_referee_level', () => {\n        const incompleteData = {\n          is_white_whistle: true\n        };\n        \n        const { error } = UserSchemas.levelUpdate.validate(incompleteData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('required');\n      });\n      \n      test('should make is_white_whistle optional', () => {\n        const minimalData = {\n          new_referee_level: 'Rookie'\n        };\n        \n        const { error } = UserSchemas.levelUpdate.validate(minimalData);\n        expect(error).toBeUndefined();\n      });\n    });\n  });\n  \n  describe('RefereeSchemas validation', () => {\n    describe('levelAssignment schema', () => {\n      test('should validate level assignment request', () => {\n        const assignmentData = {\n          user_id: '123e4567-e89b-12d3-a456-426614174000',\n          new_referee_level: 'Junior',\n          is_white_whistle: false\n        };\n        \n        const { error, value } = RefereeSchemas.levelAssignment.validate(assignmentData);\n        expect(error).toBeUndefined();\n        expect(value.user_id).toBe('123e4567-e89b-12d3-a456-426614174000');\n        expect(value.new_referee_level).toBe('Junior');\n      });\n      \n      test('should require valid UUID for user_id', () => {\n        const invalidData = {\n          user_id: 'invalid-uuid',\n          new_referee_level: 'Junior'\n        };\n        \n        const { error } = RefereeSchemas.levelAssignment.validate(invalidData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('valid GUID');\n      });\n      \n      test('should require valid referee level', () => {\n        const invalidData = {\n          user_id: '123e4567-e89b-12d3-a456-426614174000',\n          new_referee_level: 'InvalidLevel'\n        };\n        \n        const { error } = RefereeSchemas.levelAssignment.validate(invalidData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('must be one of');\n      });\n    });\n    \n    describe('roleAssignment schema', () => {\n      test('should validate role assignment request', () => {\n        const roleData = {\n          user_id: '123e4567-e89b-12d3-a456-426614174000',\n          role_name: 'Evaluator'\n        };\n        \n        const { error, value } = RefereeSchemas.roleAssignment.validate(roleData);\n        expect(error).toBeUndefined();\n        expect(value.user_id).toBe('123e4567-e89b-12d3-a456-426614174000');\n        expect(value.role_name).toBe('Evaluator');\n      });\n      \n      test('should require both fields', () => {\n        const incompleteData = {\n          user_id: '123e4567-e89b-12d3-a456-426614174000'\n        };\n        \n        const { error } = RefereeSchemas.roleAssignment.validate(incompleteData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('required');\n      });\n    });\n    \n    describe('roleDefinition schema', () => {\n      test('should validate role definition', () => {\n        const roleDefinition = {\n          name: 'Test Role',\n          description: 'A role for testing',\n          permissions: {\n            can_officiate: true,\n            can_evaluate: false,\n            can_mentor: true\n          },\n          is_active: true\n        };\n        \n        const { error, value } = RefereeSchemas.roleDefinition.validate(roleDefinition);\n        expect(error).toBeUndefined();\n        expect(value.name).toBe('Test Role');\n        expect(value.permissions.can_officiate).toBe(true);\n      });\n      \n      test('should require name field', () => {\n        const incompleteData = {\n          description: 'Missing name'\n        };\n        \n        const { error } = RefereeSchemas.roleDefinition.validate(incompleteData);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('required');\n      });\n      \n      test('should validate name length', () => {\n        const shortName = {\n          name: 'A'\n        };\n        \n        const { error } = RefereeSchemas.roleDefinition.validate(shortName);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('at least 2 characters');\n        \n        const longName = {\n          name: 'A'.repeat(51)\n        };\n        \n        const { error: longError } = RefereeSchemas.roleDefinition.validate(longName);\n        expect(longError).toBeDefined();\n        expect(longError.details[0].message).toContain('less than or equal to 50');\n      });\n      \n      test('should provide default values for permissions', () => {\n        const minimalRole = {\n          name: 'Minimal Role'\n        };\n        \n        const { error, value } = RefereeSchemas.roleDefinition.validate(minimalRole);\n        expect(error).toBeUndefined();\n        expect(value.permissions).toEqual({});\n        expect(value.is_active).toBe(true);\n      });\n      \n      test('should validate permission types', () => {\n        const invalidPermissions = {\n          name: 'Test Role',\n          permissions: {\n            can_officiate: 'not_boolean',\n            can_evaluate: 123\n          }\n        };\n        \n        const { error } = RefereeSchemas.roleDefinition.validate(invalidPermissions);\n        expect(error).toBeDefined();\n      });\n      \n      test('should validate description length', () => {\n        const longDescription = {\n          name: 'Test Role',\n          description: 'A'.repeat(501)\n        };\n        \n        const { error } = RefereeSchemas.roleDefinition.validate(longDescription);\n        expect(error).toBeDefined();\n        expect(error.details[0].message).toContain('less than or equal to 500');\n      });\n    });\n  });\n  \n  describe('Edge Cases and Error Handling', () => {\n    test('should handle null and undefined values', () => {\n      const dataWithNulls = {\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        password: 'testpassword123',\n        postal_code: 'T1A1A1',\n        new_referee_level: null,\n        is_white_whistle: null\n      };\n      \n      const { error, value } = UserSchemas.create.validate(dataWithNulls);\n      expect(error).toBeDefined(); // Should fail validation\n    });\n    \n    test('should handle empty strings', () => {\n      const dataWithEmptyStrings = {\n        name: '',\n        email: 'test@referee.com',\n        password: 'testpassword123',\n        postal_code: 'T1A1A1'\n      };\n      \n      const { error } = UserSchemas.create.validate(dataWithEmptyStrings);\n      expect(error).toBeDefined(); // Should fail validation for empty name\n    });\n    \n    test('should trim whitespace from strings', () => {\n      const dataWithWhitespace = {\n        name: '  Test Referee  ',\n        email: 'test@referee.com',\n        password: 'testpassword123',\n        postal_code: 'T1A1A1'\n      };\n      \n      const { error, value } = UserSchemas.create.validate(dataWithWhitespace);\n      expect(error).toBeUndefined();\n      expect(value.name).toBe('Test Referee'); // Should be trimmed\n    });\n    \n    test('should validate email format', () => {\n      const invalidEmails = ['invalid', 'invalid@', '@invalid.com', 'invalid.com'];\n      \n      invalidEmails.forEach(email => {\n        const data = {\n          name: 'Test Referee',\n          email: email,\n          password: 'testpassword123',\n          postal_code: 'T1A1A1'\n        };\n        \n        const { error } = UserSchemas.create.validate(data);\n        expect(error).toBeDefined();\n      });\n    });\n    \n    test('should validate password requirements', () => {\n      const shortPassword = {\n        name: 'Test Referee',\n        email: 'test@referee.com',\n        password: '123',\n        postal_code: 'T1A1A1'\n      };\n      \n      const { error } = UserSchemas.create.validate(shortPassword);\n      expect(error).toBeDefined();\n      expect(error.details[0].message).toContain('at least 8 characters');\n    });\n  });\n});"