/**\n * Unit tests for updated referees endpoints with new level system\n * Tests the new level system endpoints and white whistle functionality\n */\n\nconst request = require('supertest');\nconst express = require('express');\nconst referees = require('../../src/routes/referees');\nconst { setupTestDatabase, cleanupTestDatabase, createTestUser } = require('../helpers/test-helpers');\n\n// Mock middleware\njest.mock('../../src/middleware/auth', () => ({\n  authenticateToken: (req, res, next) => {\n    req.user = req.testUser || { id: 'test-admin-id', role: 'admin' };\n    next();\n  },\n  requireRole: (role) => (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    next();\n  }\n}));\n\n// Mock database\nlet mockDb;\njest.mock('../../src/config/database', () => mockDb);\n\ndescribe('Referees API - New Level System', () => {\n  let app;\n  let db;\n  let adminUser;\n  let refereeUser;\n  let rookieLevel, juniorLevel, seniorLevel;\n  \n  beforeAll(async () => {\n    db = await setupTestDatabase();\n    mockDb = db;\n    \n    app = express();\n    app.use(express.json());\n    app.use('/api/referees', referees);\n    \n    // Create test users\n    adminUser = await createTestUser(db, {\n      name: 'Admin User',\n      email: 'admin@test.com',\n      role: 'admin'\n    });\n    \n    refereeUser = await createTestUser(db, {\n      name: 'Test Referee',\n      email: 'referee@test.com',\n      role: 'referee',\n      postal_code: 'T1A1A1'\n    });\n    \n    // Get referee levels\n    rookieLevel = await db('referee_levels').where('name', 'Rookie').first();\n    juniorLevel = await db('referee_levels').where('name', 'Junior').first();\n    seniorLevel = await db('referee_levels').where('name', 'Senior').first();\n  });\n  \n  afterAll(async () => {\n    await cleanupTestDatabase(db);\n  });\n  \n  beforeEach(async () => {\n    // Reset referee data before each test\n    await db('users')\n      .where('id', refereeUser.id)\n      .update({\n        new_referee_level: null,\n        is_white_whistle: false,\n        referee_level_id: null\n      });\n  });\n  \n  describe('PATCH /api/referees/:id/level', () => {\n    test('should update referee level to Rookie (admin only)', async () => {\n      const levelUpdate = {\n        new_referee_level: 'Rookie'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/level`)\n        .send(levelUpdate)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('Rookie');\n      \n      // Verify database update\n      const updatedReferee = await db('users')\n        .where('id', refereeUser.id)\n        .first();\n      \n      expect(updatedReferee.new_referee_level).toBe('Rookie');\n      expect(updatedReferee.is_white_whistle).toBe(true); // Always true for Rookie\n      expect(updatedReferee.referee_level_id).toBe(rookieLevel.id);\n    });\n    \n    test('should update referee level to Junior with white whistle flag', async () => {\n      const levelUpdate = {\n        new_referee_level: 'Junior',\n        is_white_whistle: true\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/level`)\n        .send(levelUpdate)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      \n      // Verify database update\n      const updatedReferee = await db('users')\n        .where('id', refereeUser.id)\n        .first();\n      \n      expect(updatedReferee.new_referee_level).toBe('Junior');\n      expect(updatedReferee.is_white_whistle).toBe(true);\n      expect(updatedReferee.referee_level_id).toBe(juniorLevel.id);\n    });\n    \n    test('should update referee level to Senior (never white whistle)', async () => {\n      const levelUpdate = {\n        new_referee_level: 'Senior',\n        is_white_whistle: true // Should be ignored\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/level`)\n        .send(levelUpdate)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      \n      // Verify database update\n      const updatedReferee = await db('users')\n        .where('id', refereeUser.id)\n        .first();\n      \n      expect(updatedReferee.new_referee_level).toBe('Senior');\n      expect(updatedReferee.is_white_whistle).toBe(false); // Always false for Senior\n      expect(updatedReferee.referee_level_id).toBe(seniorLevel.id);\n    });\n    \n    test('should reject invalid referee level', async () => {\n      const levelUpdate = {\n        new_referee_level: 'InvalidLevel'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/level`)\n        .send(levelUpdate)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should return 404 for non-existent referee', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const levelUpdate = {\n        new_referee_level: 'Junior'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${fakeId}/level`)\n        .send(levelUpdate)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should require admin role', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const levelUpdate = {\n        new_referee_level: 'Junior'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/level`)\n        .send(levelUpdate)\n        .expect(403);\n      \n      expect(response.body.error).toBe('Forbidden');\n    });\n    \n    test('should require valid UUID format', async () => {\n      const levelUpdate = {\n        new_referee_level: 'Junior'\n      };\n      \n      const response = await request(app)\n        .patch('/api/referees/invalid-uuid/level')\n        .send(levelUpdate)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n  });\n  \n  describe('PATCH /api/referees/:id/roles', () => {\n    let evaluatorRole;\n    \n    beforeEach(async () => {\n      evaluatorRole = await db('referee_roles').where('name', 'Evaluator').first();\n    });\n    \n    test('should assign role to referee (admin only)', async () => {\n      const roleAction = {\n        action: 'assign',\n        role_name: 'Evaluator'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(roleAction)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('assigned successfully');\n      \n      // Verify assignment in database\n      const assignment = await db('user_referee_roles')\n        .where('user_id', refereeUser.id)\n        .where('referee_role_id', evaluatorRole.id)\n        .where('is_active', true)\n        .first();\n      \n      expect(assignment).toBeDefined();\n    });\n    \n    test('should remove role from referee (admin only)', async () => {\n      // First assign the role\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: evaluatorRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n      \n      const roleAction = {\n        action: 'remove',\n        role_name: 'Evaluator'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(roleAction)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('removed successfully');\n      \n      // Verify role is deactivated\n      const assignment = await db('user_referee_roles')\n        .where('user_id', refereeUser.id)\n        .where('referee_role_id', evaluatorRole.id)\n        .first();\n      \n      expect(assignment.is_active).toBe(false);\n    });\n    \n    test('should prevent removal of default Referee role', async () => {\n      const roleAction = {\n        action: 'remove',\n        role_name: 'Referee'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(roleAction)\n        .expect(403);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('Cannot remove default');\n    });\n    \n    test('should handle duplicate role assignment', async () => {\n      // First assign the role\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: evaluatorRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n      \n      const roleAction = {\n        action: 'assign',\n        role_name: 'Evaluator'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(roleAction)\n        .expect(409);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('already has role');\n    });\n    \n    test('should validate required fields', async () => {\n      const invalidAction = {\n        action: 'invalid_action',\n        role_name: 'Evaluator'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(invalidAction)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should require admin role', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const roleAction = {\n        action: 'assign',\n        role_name: 'Evaluator'\n      };\n      \n      const response = await request(app)\n        .patch(`/api/referees/${refereeUser.id}/roles`)\n        .send(roleAction)\n        .expect(403);\n      \n      expect(response.body.error).toBe('Forbidden');\n    });\n  });\n  \n  describe('GET /api/referees/:id/white-whistle-status', () => {\n    beforeEach(async () => {\n      // Set referee to Junior level with white whistle\n      await db('users')\n        .where('id', refereeUser.id)\n        .update({\n          new_referee_level: 'Junior',\n          is_white_whistle: true,\n          referee_level_id: juniorLevel.id\n        });\n    });\n    \n    test('should return white whistle status for referee', async () => {\n      const response = await request(app)\n        .get(`/api/referees/${refereeUser.id}/white-whistle-status`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user_id).toBe(refereeUser.id);\n      expect(response.body.data.current_level).toBe('Junior');\n      expect(response.body.data.is_white_whistle).toBe(true);\n      expect(response.body.data.should_display_white_whistle).toBe(true);\n      expect(response.body.data.white_whistle_logic).toBeDefined();\n    });\n    \n    test('should return 404 for non-existent referee', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const response = await request(app)\n        .get(`/api/referees/${fakeId}/white-whistle-status`)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should return 404 for non-referee user', async () => {\n      const response = await request(app)\n        .get(`/api/referees/${adminUser.id}/white-whistle-status`)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should work without authentication (public endpoint)', async () => {\n      // This endpoint doesn't require authentication\n      const response = await request(app)\n        .get(`/api/referees/${refereeUser.id}/white-whistle-status`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n    });\n  });\n  \n  describe('GET /api/referees/levels/summary', () => {\n    beforeEach(async () => {\n      // Set up test data with different levels\n      await db('users')\n        .where('id', refereeUser.id)\n        .update({\n          new_referee_level: 'Junior',\n          is_white_whistle: true,\n          referee_level_id: juniorLevel.id\n        });\n      \n      // Create additional test referees\n      const rookieReferee = await createTestUser(db, {\n        name: 'Rookie Referee',\n        email: 'rookie@test.com',\n        role: 'referee',\n        postal_code: 'T1A1A1',\n        new_referee_level: 'Rookie',\n        is_white_whistle: true,\n        referee_level_id: rookieLevel.id\n      });\n      \n      const seniorReferee = await createTestUser(db, {\n        name: 'Senior Referee',\n        email: 'senior@test.com',\n        role: 'referee',\n        postal_code: 'T1A1A1',\n        new_referee_level: 'Senior',\n        is_white_whistle: false,\n        referee_level_id: seniorLevel.id\n      });\n    });\n    \n    test('should return referee levels summary for admin', async () => {\n      const response = await request(app)\n        .get('/api/referees/levels/summary')\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('level_distribution');\n      expect(response.body.data).toHaveProperty('white_whistle_stats');\n      expect(response.body.data).toHaveProperty('role_distribution');\n      expect(response.body.data).toHaveProperty('level_system');\n      \n      // Check level system explanation\n      expect(response.body.data.level_system.rookie).toBe('Always displays white whistle');\n      expect(response.body.data.level_system.junior).toBe('Conditionally displays white whistle');\n      expect(response.body.data.level_system.senior).toBe('Never displays white whistle');\n    });\n    \n    test('should require admin role', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const response = await request(app)\n        .get('/api/referees/levels/summary')\n        .expect(403);\n      \n      expect(response.body.error).toBe('Forbidden');\n    });\n    \n    test('should include white whistle statistics', async () => {\n      const response = await request(app)\n        .get('/api/referees/levels/summary')\n        .expect(200);\n      \n      const whiteWhistleStats = response.body.data.white_whistle_stats;\n      expect(whiteWhistleStats).toBeInstanceOf(Array);\n      \n      // Should have stats for each level\n      const juniorStats = whiteWhistleStats.find(stat => stat.new_referee_level === 'Junior');\n      if (juniorStats) {\n        expect(juniorStats).toHaveProperty('total');\n        expect(juniorStats).toHaveProperty('with_white_whistle');\n      }\n    });\n  });\n  \n  describe('GET /api/referees/:id (enhanced with new system)', () => {\n    beforeEach(async () => {\n      // Set referee to Junior level with white whistle and assign Evaluator role\n      await db('users')\n        .where('id', refereeUser.id)\n        .update({\n          new_referee_level: 'Junior',\n          is_white_whistle: true,\n          referee_level_id: juniorLevel.id\n        });\n      \n      const evaluatorRole = await db('referee_roles').where('name', 'Evaluator').first();\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: evaluatorRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n    });\n    \n    test('should return enhanced referee data with new system fields', async () => {\n      const response = await request(app)\n        .get(`/api/referees/${refereeUser.id}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      const referee = response.body.data;\n      \n      // Should have new level system fields\n      expect(referee).toHaveProperty('should_display_white_whistle');\n      expect(referee).toHaveProperty('referee_roles');\n      expect(referee).toHaveProperty('role_names');\n      expect(referee).toHaveProperty('can_evaluate');\n      expect(referee).toHaveProperty('can_mentor');\n      \n      // Should have correct values\n      expect(referee.should_display_white_whistle).toBe(true); // Junior with flag\n      expect(referee.role_names).toContain('Evaluator');\n      expect(referee.can_evaluate).toBe(true);\n    });\n  });\n});"