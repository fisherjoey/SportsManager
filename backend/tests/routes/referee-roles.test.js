/**\n * Unit tests for referee roles API endpoints\n * Tests the new role management system and admin-only operations\n */\n\nconst request = require('supertest');\nconst express = require('express');\nconst refereeRoles = require('../../src/routes/referee-roles');\nconst { setupTestDatabase, cleanupTestDatabase, createTestUser } = require('../helpers/test-helpers');\nconst jwt = require('jsonwebtoken');\n\n// Mock middleware\njest.mock('../../src/middleware/auth', () => ({\n  authenticateToken: (req, res, next) => {\n    req.user = req.testUser || { id: 'test-user-id', role: 'admin' };\n    next();\n  },\n  requireRole: (role) => (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).json({ error: 'Forbidden' });\n    }\n    next();\n  }\n}));\n\n// Mock database\nlet mockDb;\njest.mock('../../src/config/database', () => mockDb);\n\ndescribe('Referee Roles API', () => {\n  let app;\n  let db;\n  let adminUser;\n  let refereeUser;\n  let testRole;\n  \n  beforeAll(async () => {\n    db = await setupTestDatabase();\n    mockDb = db;\n    \n    app = express();\n    app.use(express.json());\n    app.use('/api/referee-roles', refereeRoles);\n    \n    // Create test users\n    adminUser = await createTestUser(db, {\n      name: 'Admin User',\n      email: 'admin@test.com',\n      role: 'admin'\n    });\n    \n    refereeUser = await createTestUser(db, {\n      name: 'Referee User',\n      email: 'referee@test.com',\n      role: 'referee'\n    });\n  });\n  \n  afterAll(async () => {\n    await cleanupTestDatabase(db);\n  });\n  \n  beforeEach(async () => {\n    // Clean up test data\n    await db('user_referee_roles').del();\n    await db('referee_roles').where('name', 'LIKE', 'Test%').del();\n    \n    // Create a test role\n    const [role] = await db('referee_roles').insert({\n      id: db.raw('gen_random_uuid()'),\n      name: 'Test Role',\n      description: 'Test role for unit tests',\n      permissions: JSON.stringify({\n        can_officiate: true,\n        can_evaluate: false\n      }),\n      is_active: true\n    }).returning('*');\n    \n    testRole = role;\n  });\n  \n  describe('GET /api/referee-roles', () => {\n    test('should return all active referee roles for authenticated user', async () => {\n      const response = await request(app)\n        .get('/api/referee-roles')\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Array);\n      expect(response.body.data.length).toBeGreaterThan(0);\n      \n      // Should include our test role\n      const testRoleInResponse = response.body.data.find(role => role.name === 'Test Role');\n      expect(testRoleInResponse).toBeDefined();\n      expect(testRoleInResponse.permissions).toEqual({\n        can_officiate: true,\n        can_evaluate: false\n      });\n    });\n    \n    test('should include inactive roles when requested', async () => {\n      // Create an inactive role\n      await db('referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        name: 'Inactive Test Role',\n        description: 'Inactive test role',\n        permissions: '{}',\n        is_active: false\n      });\n      \n      const response = await request(app)\n        .get('/api/referee-roles?include_inactive=true')\n        .expect(200);\n      \n      const inactiveRole = response.body.data.find(role => role.name === 'Inactive Test Role');\n      expect(inactiveRole).toBeDefined();\n      expect(inactiveRole.is_active).toBe(false);\n    });\n    \n    test('should exclude inactive roles by default', async () => {\n      // Create an inactive role\n      await db('referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        name: 'Inactive Test Role',\n        description: 'Inactive test role',\n        permissions: '{}',\n        is_active: false\n      });\n      \n      const response = await request(app)\n        .get('/api/referee-roles')\n        .expect(200);\n      \n      const inactiveRole = response.body.data.find(role => role.name === 'Inactive Test Role');\n      expect(inactiveRole).toBeUndefined();\n    });\n  });\n  \n  describe('GET /api/referee-roles/:id', () => {\n    test('should return specific referee role with assigned users', async () => {\n      // Assign the test role to a user\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: testRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n      \n      const response = await request(app)\n        .get(`/api/referee-roles/${testRole.id}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.id).toBe(testRole.id);\n      expect(response.body.data.name).toBe('Test Role');\n      expect(response.body.data.assigned_users).toHaveLength(1);\n      expect(response.body.data.assigned_users[0].name).toBe('Referee User');\n    });\n    \n    test('should return 404 for non-existent role', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const response = await request(app)\n        .get(`/api/referee-roles/${fakeId}`)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('not found');\n    });\n    \n    test('should return 400 for invalid UUID', async () => {\n      const response = await request(app)\n        .get('/api/referee-roles/invalid-uuid')\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n  });\n  \n  describe('POST /api/referee-roles', () => {\n    test('should create new referee role as admin', async () => {\n      const newRoleData = {\n        name: 'Test New Role',\n        description: 'A new test role',\n        permissions: {\n          can_officiate: true,\n          can_evaluate: true,\n          can_mentor: false\n        },\n        is_active: true\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles')\n        .send(newRoleData)\n        .expect(201);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.name).toBe('Test New Role');\n      expect(response.body.data.description).toBe('A new test role');\n      expect(response.body.data.permissions).toEqual(newRoleData.permissions);\n      expect(response.body.location).toContain('/api/referee-roles/');\n    });\n    \n    test('should prevent duplicate role names', async () => {\n      const duplicateRoleData = {\n        name: 'Test Role', // Same as existing test role\n        description: 'Duplicate role',\n        permissions: {}\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles')\n        .send(duplicateRoleData)\n        .expect(409);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('already exists');\n    });\n    \n    test('should validate required fields', async () => {\n      const invalidRoleData = {\n        description: 'Missing name field'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles')\n        .send(invalidRoleData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should reject non-admin users', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const response = await request(app)\n        .post('/api/referee-roles')\n        .send({ name: 'Should Not Work' })\n        .expect(403);\n      \n      expect(response.body.error).toBe('Forbidden');\n    });\n  });\n  \n  describe('PUT /api/referee-roles/:id', () => {\n    test('should update referee role as admin', async () => {\n      const updateData = {\n        name: 'Updated Test Role',\n        description: 'Updated description',\n        permissions: {\n          can_officiate: false,\n          can_evaluate: true\n        },\n        is_active: true\n      };\n      \n      const response = await request(app)\n        .put(`/api/referee-roles/${testRole.id}`)\n        .send(updateData)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.name).toBe('Updated Test Role');\n      expect(response.body.data.description).toBe('Updated description');\n      expect(response.body.data.permissions.can_evaluate).toBe(true);\n    });\n    \n    test('should prevent name conflicts during update', async () => {\n      // Create another role\n      const [otherRole] = await db('referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        name: 'Other Role',\n        description: 'Another role',\n        permissions: '{}',\n        is_active: true\n      }).returning('*');\n      \n      const updateData = {\n        name: 'Other Role', // Trying to use existing name\n        description: 'Should fail'\n      };\n      \n      const response = await request(app)\n        .put(`/api/referee-roles/${testRole.id}`)\n        .send(updateData)\n        .expect(409);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('already exists');\n    });\n    \n    test('should return 404 for non-existent role', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const response = await request(app)\n        .put(`/api/referee-roles/${fakeId}`)\n        .send({ name: 'Should Not Work' })\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n  });\n  \n  describe('DELETE /api/referee-roles/:id', () => {\n    test('should soft delete role when not in use', async () => {\n      const response = await request(app)\n        .delete(`/api/referee-roles/${testRole.id}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      \n      // Verify role is marked as inactive\n      const updatedRole = await db('referee_roles')\n        .where('id', testRole.id)\n        .first();\n      \n      expect(updatedRole.is_active).toBe(false);\n    });\n    \n    test('should prevent deletion of role in use', async () => {\n      // Assign the role to a user\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: testRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n      \n      const response = await request(app)\n        .delete(`/api/referee-roles/${testRole.id}`)\n        .expect(409);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('currently assigned');\n    });\n  });\n  \n  describe('POST /api/referee-roles/assign', () => {\n    test('should assign role to referee as admin', async () => {\n      const assignmentData = {\n        user_id: refereeUser.id,\n        role_name: 'Test Role'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/assign')\n        .send(assignmentData)\n        .expect(201);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('assigned successfully');\n      \n      // Verify assignment in database\n      const assignment = await db('user_referee_roles')\n        .where('user_id', refereeUser.id)\n        .where('referee_role_id', testRole.id)\n        .where('is_active', true)\n        .first();\n      \n      expect(assignment).toBeDefined();\n    });\n    \n    test('should prevent duplicate role assignments', async () => {\n      // First assignment\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: testRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n      \n      const assignmentData = {\n        user_id: refereeUser.id,\n        role_name: 'Test Role'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/assign')\n        .send(assignmentData)\n        .expect(409);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('already has role');\n    });\n    \n    test('should validate request data', async () => {\n      const invalidData = {\n        user_id: 'invalid-uuid',\n        role_name: 'Test Role'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/assign')\n        .send(invalidData)\n        .expect(400);\n      \n      expect(response.body.success).toBe(false);\n    });\n  });\n  \n  describe('POST /api/referee-roles/remove', () => {\n    beforeEach(async () => {\n      // Assign test role to referee\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: testRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n    });\n    \n    test('should remove role from referee as admin', async () => {\n      const removalData = {\n        user_id: refereeUser.id,\n        role_name: 'Test Role'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/remove')\n        .send(removalData)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('removed successfully');\n      \n      // Verify role is deactivated\n      const assignment = await db('user_referee_roles')\n        .where('user_id', refereeUser.id)\n        .where('referee_role_id', testRole.id)\n        .first();\n      \n      expect(assignment.is_active).toBe(false);\n    });\n    \n    test('should prevent removal of default Referee role', async () => {\n      const removalData = {\n        user_id: refereeUser.id,\n        role_name: 'Referee'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/remove')\n        .send(removalData)\n        .expect(403);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('Cannot remove default');\n    });\n    \n    test('should return 404 for non-existent assignment', async () => {\n      const removalData = {\n        user_id: refereeUser.id,\n        role_name: 'Non Existent Role'\n      };\n      \n      const response = await request(app)\n        .post('/api/referee-roles/remove')\n        .send(removalData)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n  });\n  \n  describe('GET /api/referee-roles/user/:userId', () => {\n    beforeEach(async () => {\n      // Assign test role to referee\n      await db('user_referee_roles').insert({\n        id: db.raw('gen_random_uuid()'),\n        user_id: refereeUser.id,\n        referee_role_id: testRole.id,\n        assigned_at: new Date(),\n        is_active: true\n      });\n    });\n    \n    test('should return user roles for admin', async () => {\n      const response = await request(app)\n        .get(`/api/referee-roles/user/${refereeUser.id}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user.name).toBe('Referee User');\n      expect(response.body.data.roles).toHaveLength(1);\n      expect(response.body.data.roles[0].name).toBe('Test Role');\n    });\n    \n    test('should allow users to view their own roles', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const response = await request(app)\n        .get(`/api/referee-roles/user/${refereeUser.id}`)\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data.roles).toHaveLength(1);\n    });\n    \n    test('should prevent non-admin from viewing other user roles', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: 'other-user-id', role: 'referee' };\n        next();\n      });\n      \n      const response = await request(app)\n        .get(`/api/referee-roles/user/${refereeUser.id}`)\n        .expect(403);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should return 404 for non-existent user', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const response = await request(app)\n        .get(`/api/referee-roles/user/${fakeId}`)\n        .expect(404);\n      \n      expect(response.body.success).toBe(false);\n    });\n    \n    test('should return 403 for non-referee user', async () => {\n      const response = await request(app)\n        .get(`/api/referee-roles/user/${adminUser.id}`)\n        .expect(403);\n      \n      expect(response.body.success).toBe(false);\n      expect(response.body.error.message).toContain('not a referee');\n    });\n  });\n  \n  describe('GET /api/referee-roles/permissions/summary', () => {\n    test('should return permissions summary for admin', async () => {\n      const response = await request(app)\n        .get('/api/referee-roles/permissions/summary')\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toBeInstanceOf(Array);\n      \n      const testRoleSummary = response.body.data.find(role => role.role_name === 'Test Role');\n      expect(testRoleSummary).toBeDefined();\n      expect(testRoleSummary.permissions).toContain('can_officiate');\n    });\n    \n    test('should reject non-admin users', async () => {\n      app.use((req, res, next) => {\n        req.testUser = { id: refereeUser.id, role: 'referee' };\n        next();\n      });\n      \n      const response = await request(app)\n        .get('/api/referee-roles/permissions/summary')\n        .expect(403);\n      \n      expect(response.body.error).toBe('Forbidden');\n    });\n  });\n});"