version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sports_manager_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_DB: ${DB_NAME:-sports_management}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/seeds:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - sports_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: sports_manager_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - sports_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: sports_manager_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-sports_management}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres123}@postgres:5432/${DB_NAME:-sports_management}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_URL: redis://redis:6379
      DISABLE_REDIS: ${DISABLE_REDIS:-false}
      API_URL: http://backend:3001
      SENTRY_DSN: ${SENTRY_DSN:-}
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      # Location Services
      LOCATION_SERVICE: ${LOCATION_SERVICE:-openroute}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN:-}
      OPENROUTE_API_KEY: ${OPENROUTE_API_KEY:-}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    ports:
      - "3001:3001"
    networks:
      - sports_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        npm run migrate:latest &&
        echo 'Starting server...' &&
        npm run dev
      "

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: sports_manager_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - sports_network
    depends_on:
      - backend

  # Cerbos Authorization Service (if needed)
  cerbos:
    image: ghcr.io/cerbos/cerbos:latest
    container_name: sports_manager_cerbos
    restart: unless-stopped
    ports:
      - "3592:3592"  # gRPC port
      - "3593:3593"  # HTTP port
    volumes:
      - ./cerbos/policies:/policies
      - ./cerbos/config/config.yaml:/config.yaml
    command: ["server", "--config=/config.yaml"]
    networks:
      - sports_network
    healthcheck:
      test: ["CMD", "cerbosctl", "version"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  sports_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: