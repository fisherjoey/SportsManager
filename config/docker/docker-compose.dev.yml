# Optimized Docker Compose for Development
# Usage: docker-compose -f config/docker/docker-compose.dev.yml up
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sports_manager_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_DB: ${DB_NAME:-sports_management}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ../../backend/seeds:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - sports_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sports_manager_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - sports_network_dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API with optimized hot-reload
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: dev
    container_name: sports_manager_backend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-sports_management}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres123}@postgres:5432/${DB_NAME:-sports_management}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_URL: redis://redis:6379
      DISABLE_REDIS: ${DISABLE_REDIS:-false}
      API_URL: http://backend:3001
      SENTRY_DSN: ${SENTRY_DSN:-}
      # Hot reload optimization
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-false}
      WATCHPACK_POLLING: ${WATCHPACK_POLLING:-false}
    volumes:
      # Mount source code for hot reload
      - ../../backend/src:/app/src
      - ../../backend/knexfile.ts:/app/knexfile.ts
      - ../../backend/tsconfig.json:/app/tsconfig.json
      # Exclude these to avoid conflicts
      - /app/node_modules
      - /app/dist
    ports:
      - "3001:3001"
      # Optional: Expose debugging port
      - "9229:9229"
    networks:
      - sports_network_dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'ðŸ”§ Development Mode - Hot Reload Enabled' &&
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        npm run migrate:latest &&
        echo 'Starting server with hot reload...' &&
        npm run dev
      "

  # Frontend with optimized hot-reload
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      target: dev
    container_name: sports_manager_frontend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}
      # Hot reload optimization
      WATCHPACK_POLLING: ${WATCHPACK_POLLING:-false}
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-false}
    volumes:
      # Mount source for hot reload - more selective for better performance
      - ../../frontend/app:/app/app
      - ../../frontend/components:/app/components
      - ../../frontend/lib:/app/lib
      - ../../frontend/public:/app/public
      - ../../frontend/styles:/app/styles
      - ../../frontend/hooks:/app/hooks
      - ../../frontend/next.config.js:/app/next.config.js
      - ../../frontend/tailwind.config.ts:/app/tailwind.config.ts
      - ../../frontend/tsconfig.json:/app/tsconfig.json
      # Exclude these for performance
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - sports_network_dev
    depends_on:
      - backend

  # Cerbos Authorization Service
  cerbos:
    image: ghcr.io/cerbos/cerbos:latest
    container_name: sports_manager_cerbos_dev
    restart: unless-stopped
    ports:
      - "3592:3592"  # gRPC port
      - "3593:3593"  # HTTP port
    volumes:
      - ../../cerbos/policies:/policies
      - ../../cerbos/config/config.yaml:/config.yaml
    command: ["server", "--config=/config.yaml"]
    networks:
      - sports_network_dev
    healthcheck:
      test: ["CMD", "cerbosctl", "version"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  sports_network_dev:
    driver: bridge

volumes:
  postgres_data_dev: