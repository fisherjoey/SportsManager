{
  "files": [
    {
      "filePath": "backend\\src\\routes\\referees.ts",
      "description": "Referees Routes - TypeScript Implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "referees",
      "routeCount": 18,
      "routes": [
        "GET /test",
        "GET /:id",
        "PUT /:id",
        "PATCH /:id/availability",
        "GET /available/:gameId",
        "PATCH /:id/level",
        "PATCH /:id/roles",
        "GET /:id/white-whistle-status",
        "DELETE /:id",
        "GET /levels/summary",
        "GET /:id/profile",
        "PUT /:id/wage",
        "PUT /:id/type",
        "GET /types",
        "GET /capabilities",
        "POST /:id/profile",
        "PATCH /:id/profile",
        "GET /:id/white-whistle"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\access.ts",
      "description": "Access Control API Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 15,
      "routes": [
        "GET /roles/:roleId/pages",
        "PUT /roles/:roleId/pages",
        "GET /page-registry",
        "GET /roles/:roleId/apis",
        "PUT /roles/:roleId/apis",
        "GET /api-registry",
        "GET /roles/:roleId/features",
        "PUT /roles/:roleId/features",
        "GET /roles/:roleId/scopes",
        "POST /check-page",
        "POST /check-api",
        "POST /check-feature",
        "POST /clear-cache",
        "GET /my-pages",
        "GET /my-apis"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\mentorships.ts",
      "description": "Mentorship Management API Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "mentorships",
      "routeCount": 14,
      "routes": [
        "GET /my-mentees",
        "GET /:id",
        "PUT /:id",
        "DELETE /:id",
        "GET /:id/stats",
        "GET /:id/notes",
        "POST /:id/notes",
        "PUT /:id/notes/:noteId",
        "DELETE /:id/notes/:noteId",
        "GET /:id/documents",
        "POST /:id/documents",
        "GET /:id/documents/:docId",
        "DELETE /:id/documents/:docId",
        "GET /available-mentors/:menteeId"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\employees.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "employees",
      "routeCount": 13,
      "routes": [
        "GET /departments",
        "POST /departments",
        "PUT /departments/:id",
        "GET /positions",
        "POST /positions",
        "GET /:id",
        "PUT /:id",
        "GET /:id/evaluations",
        "POST /:id/evaluations",
        "GET /:id/training",
        "POST /:id/training",
        "PUT /training/:trainingId",
        "GET /stats/overview"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\cerbos.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "cerbos",
      "routeCount": 12,
      "routes": [
        "GET /resources",
        "GET /resources/:kind",
        "POST /resources",
        "PUT /resources/:kind",
        "DELETE /resources/:kind",
        "GET /resources/:kind/actions",
        "POST /resources/:kind/actions",
        "DELETE /resources/:kind/actions/:action",
        "GET /resources/:kind/roles/:role",
        "PUT /resources/:kind/roles/:role",
        "POST /reload",
        "GET /derived-roles"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\roles.ts",
      "description": "Admin Role Management Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 10,
      "routes": [
        "GET /:roleId",
        "PUT /:roleId",
        "DELETE /:roleId",
        "POST /:roleId/permissions",
        "DELETE /:roleId/permissions",
        "GET /:roleId/users",
        "POST /:roleId/users",
        "DELETE /:roleId/users",
        "PATCH /:roleId/status",
        "GET /:roleId/hierarchy"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\ai-assignment-rules.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "ai-assignment-rules",
      "routeCount": 10,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "POST /:id/partner-preferences",
        "DELETE /:id/partner-preferences/:prefId",
        "POST /:id/run",
        "GET /:id/runs",
        "GET /runs/:runId",
        "POST /:id/toggle",
        "DELETE /:id",
        "GET /analytics"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\assets.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "assets",
      "routeCount": 10,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "GET /:id/maintenance",
        "POST /:id/maintenance",
        "PUT /maintenance/:maintenanceId",
        "POST /:id/checkout",
        "POST /checkout/:checkoutId/checkin",
        "GET /stats/overview",
        "GET /maintenance/due",
        "GET /checkouts/overdue"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\budgets.ts",
      "description": "Budget Management Routes (TypeScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "budgets",
      "routeCount": 10,
      "routes": [
        "GET /periods",
        "POST /periods",
        "GET /categories",
        "POST /categories",
        "GET /:id",
        "PUT /:id",
        "POST /:id/allocations",
        "DELETE /periods/:id",
        "DELETE /categories/:id",
        "DELETE /:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\documents.ts",
      "description": "Document Management Routes (TypeScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "documents",
      "routeCount": 10,
      "routes": [
        "GET /:id",
        "POST /:id/versions",
        "PUT /:id",
        "POST /:id/approve",
        "POST /:id/archive",
        "GET /:id/download",
        "POST /:id/acknowledge",
        "GET /:id/acknowledgments",
        "GET /stats/overview",
        "GET /acknowledgments/pending"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\locations.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "locations",
      "routeCount": 10,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "DELETE /:id",
        "GET /distances",
        "GET /:locationId/distance",
        "GET /admin/distance-stats",
        "POST /admin/calculate-user-distances/:userId",
        "POST /admin/calculate-location-distances/:locationId",
        "POST /admin/retry-failed-calculations",
        "POST /admin/initialize-all-distances"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\accounting-integration.ts",
      "description": "GET /api/accounting/chart-of-accounts",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "accounting-integration",
      "routeCount": 9,
      "routes": [
        "GET /chart-of-accounts",
        "POST /chart-of-accounts",
        "GET /integrations",
        "POST /integrations",
        "POST /integrations/:id/test",
        "GET /journal-entries",
        "POST /journal-entries",
        "POST /journal-entries/:id/approve",
        "GET /sync-logs"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "description": "RBAC Registry Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 8,
      "routes": [
        "GET /scan",
        "GET /unconfigured",
        "GET /stats",
        "POST /configure",
        "POST /auto-configure",
        "GET /scan-history",
        "POST /export-config",
        "DELETE /clear-configured"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\assignments.ts",
      "description": "Assignment management routes for the Sports Management API (TypeScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "assignments",
      "routeCount": 8,
      "routes": [
        "GET /:id",
        "POST /bulk-update",
        "DELETE /bulk-remove",
        "PATCH /:id/status",
        "DELETE /:id",
        "POST /bulk",
        "POST /check-conflicts",
        "GET /available-referees/:game_id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\content.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "content",
      "routeCount": 8,
      "routes": [
        "GET /items",
        "GET /items/slug/:slug",
        "POST /items",
        "PUT /items/:id",
        "DELETE /items/:id",
        "GET /items/:id",
        "GET /items/slug/:slug",
        "GET /categories"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\organizational-analytics.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "organizational-analytics",
      "routeCount": 8,
      "routes": [
        "GET /employees/performance",
        "GET /employees/retention",
        "GET /employees/training",
        "GET /health/overview",
        "GET /predictions/staffing",
        "GET /predictions/performance",
        "GET /costs/per-employee",
        "GET /dashboard/executive"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\financial-reports.ts",
      "description": "GET /api/financial-reports/budget-variance",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-reports",
      "routeCount": 7,
      "routes": [
        "GET /budget-variance",
        "GET /cash-flow",
        "GET /expense-analysis",
        "GET /payroll-summary",
        "GET /kpis",
        "POST /kpis",
        "GET /export/:type"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\financial-transactions.ts",
      "description": "Financial Transactions API Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-transactions",
      "routeCount": 7,
      "routes": [
        "GET /transactions",
        "POST /transactions",
        "GET /transactions/:id",
        "PUT /transactions/:id/status",
        "GET /vendors",
        "POST /vendors",
        "GET /dashboard"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\notifications.ts",
      "description": "GET /api/notifications - Get user's notifications",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "notifications",
      "routeCount": 7,
      "routes": [
        "GET /unread-count",
        "PATCH /:id/read",
        "PATCH /mark-all-read",
        "DELETE /:id",
        "GET /preferences",
        "PATCH /preferences",
        "POST /broadcast"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\referee-roles.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "referee-roles",
      "routeCount": 7,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "DELETE /:id",
        "POST /assign",
        "POST /remove",
        "GET /user/:userId",
        "GET /permissions/summary"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\maintenance.ts",
      "description": "Admin Maintenance Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 6,
      "routes": [
        "GET /status",
        "POST /gc",
        "GET /logs/size",
        "POST /logs/rotate",
        "GET /database/stats",
        "GET /health"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\availability.ts",
      "description": "Availability Routes - TypeScript Implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "availability",
      "routeCount": 6,
      "routes": [
        "GET /referees/:id",
        "POST /referees/:id",
        "PUT /:windowId",
        "DELETE /:windowId",
        "GET /conflicts",
        "POST /bulk"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\calendar.ts",
      "description": "Calendar routes with TypeScript implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "calendar",
      "routeCount": 6,
      "routes": [
        "GET /referees/:id/calendar/ical",
        "GET /games/calendar-feed",
        "POST /sync",
        "GET /sync/status",
        "DELETE /sync",
        "POST /upload"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\company-credit-cards.ts",
      "description": "GET /api/company-credit-cards",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "company-credit-cards",
      "routeCount": 6,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "GET /:id/transactions",
        "POST /:id/assign",
        "POST /:id/block",
        "POST /:id/unblock"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\posts.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "posts",
      "routeCount": 6,
      "routes": [
        "GET /categories",
        "GET /:id",
        "PUT /:id",
        "DELETE /:id",
        "POST /:id/media",
        "GET /:id/reads"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\teams.ts",
      "description": "Teams Routes - TypeScript Implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "teams",
      "routeCount": 6,
      "routes": [
        "GET /:id",
        "POST /bulk",
        "POST /generate",
        "PUT /:id",
        "DELETE /:id",
        "GET /league/:league_id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\auth.ts",
      "description": "Authentication routes with comprehensive TypeScript typing",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "auth",
      "routeCount": 5,
      "routes": [
        "POST /login",
        "POST /register",
        "GET /me",
        "POST /refresh-permissions",
        "POST /check-page-access"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\chunks.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "chunks",
      "routeCount": 5,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "POST /:id/assign",
        "DELETE /:id",
        "POST /auto-create"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\games.ts",
      "description": "Game management routes for the Sports Management API (TypeScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "games",
      "routeCount": 5,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "PATCH /:id/status",
        "DELETE /:id",
        "POST /bulk-import"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\leagues.ts",
      "description": "Leagues Routes - TypeScript Implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "leagues",
      "routeCount": 5,
      "routes": [
        "GET /:id",
        "POST /bulk",
        "PUT /:id",
        "DELETE /:id",
        "GET /options/filters"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\purchase-orders.ts",
      "description": "GET /api/purchase-orders",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "purchase-orders",
      "routeCount": 5,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "POST /:id/approve",
        "POST /:id/reject",
        "GET /:id/expenses"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\cerbos-policies.ts",
      "description": "Admin Cerbos Policy Management Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 4,
      "routes": [
        "GET /roles",
        "POST /roles",
        "PUT /roles/:roleName",
        "DELETE /roles/:roleName"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\unified-roles.ts",
      "description": "Unified Role Management Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 4,
      "routes": [
        "GET /available-permissions",
        "GET /:name",
        "PUT /:name",
        "DELETE /:name"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\users.ts",
      "description": "Admin User Management Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 4,
      "routes": [
        "GET /:userId/roles",
        "PUT /:userId/roles",
        "POST /:userId/roles",
        "DELETE /:userId/roles"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\historic-patterns.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "historic-patterns",
      "routeCount": 4,
      "routes": [
        "POST /apply",
        "POST /analyze",
        "GET /:id",
        "DELETE /:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\mentee-games.ts",
      "description": "Mentee Games Management API Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "mentee-games",
      "routeCount": 4,
      "routes": [
        "GET /:id/games",
        "GET /:id/games/upcoming",
        "GET /:id/games/history",
        "GET /:id/games/analytics"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\payment-methods.ts",
      "description": "GET /api/payment-methods",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "payment-methods",
      "routeCount": 4,
      "routes": [
        "GET /:id",
        "PUT /:id",
        "DELETE /:id",
        "GET /:id/rules"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\reports.ts",
      "description": "Reports routes with TypeScript implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "reports",
      "routeCount": 4,
      "routes": [
        "GET /referee-performance",
        "GET /assignment-patterns",
        "GET /financial-summary",
        "GET /availability-gaps"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\tournaments.ts",
      "description": "Tournaments routes - TypeScript implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "tournaments",
      "routeCount": 4,
      "routes": [
        "POST /generate",
        "POST /create-games",
        "GET /formats",
        "GET /estimate"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\users.ts",
      "description": "User Management Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "users",
      "routeCount": 4,
      "routes": [
        "GET /roles",
        "GET /:id",
        "PUT /:id",
        "DELETE /:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\permissions.ts",
      "description": "Admin Permissions Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 3,
      "routes": [
        "GET /flat",
        "GET /category/:category",
        "GET /categories"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\expenses.ts",
      "description": "POST /api/expenses/receipts/upload",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "expenses",
      "routeCount": 3,
      "routes": [
        "POST /receipts/upload",
        "GET /receipts",
        "GET /receipts/:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\invitations.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "invitations",
      "routeCount": 3,
      "routes": [
        "GET /:token",
        "POST /:token/complete",
        "DELETE /:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\receipts.ts",
      "description": "GET /api/receipts",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "receipts",
      "routeCount": 3,
      "routes": [
        "POST /upload",
        "GET /:id",
        "DELETE /:id"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\roles.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "roles",
      "routeCount": 3,
      "routes": [
        "GET /available",
        "PUT /users/:userId",
        "GET /users/:userId"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\admin\\test-roles.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "admin",
      "routeCount": 2,
      "routes": [
        "GET /test",
        "GET /public-test"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\ai-suggestions.ts",
      "description": "@file ai-suggestions.ts",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "ai-suggestions",
      "routeCount": 2,
      "routes": [
        "PUT /:id/accept",
        "PUT /:id/reject"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\budget-tracker.ts",
      "description": "GET /api/budgets/utilization",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "budget-tracker",
      "routeCount": 2,
      "routes": [
        "GET /utilization",
        "GET /categories"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\communications.ts",
      "description": "Communications Routes - TypeScript implementation",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "communications",
      "routeCount": 2,
      "routes": [
        "GET /:id",
        "GET /unread/count"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\game-fees.ts",
      "description": "GET /api/game-fees",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "game-fees",
      "routeCount": 2,
      "routes": [
        "PUT /:id",
        "GET /stats"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\organization.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "organization",
      "routeCount": 2,
      "routes": [
        "GET /settings",
        "PUT /settings"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\referee-levels.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "referee-levels",
      "routeCount": 2,
      "routes": [
        "PUT /:refereeId/assign",
        "GET /check-assignment/:gameId/:refereeId"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\financial-dashboard.ts",
      "description": "Financial Dashboard API Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-dashboard",
      "routeCount": 1,
      "routes": [
        "GET /referee-payments"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\referees.bridge.ts",
      "description": "JavaScript Bridge for TypeScript Referees Routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "referees.bridge",
      "routeCount": 1,
      "routes": [
        "GET /test"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\self-assignment.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "self-assignment",
      "routeCount": 1,
      "routes": [
        "GET /available"
      ]
    },
    {
      "filePath": "backend\\src\\routes\\ai-suggestions.bridge.ts",
      "description": "@file ai-suggestions.bridge.js",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "ai-suggestions.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\availability.bridge.ts",
      "description": "Availability Routes Bridge",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "availability.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\budgets.bridge.ts",
      "description": "Budget Routes Bridge (JavaScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "budgets.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\calendar.bridge.ts",
      "description": "Bridge file for calendar routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "calendar.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\compliance.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "compliance",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\documents.bridge.ts",
      "description": "Documents Routes Bridge (JavaScript)",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "documents.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\expenses.bridge.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "expenses.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\financial-approvals.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-approvals",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\financial-dashboard.bridge.ts",
      "description": "Bridge file for financial-dashboard route",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-dashboard.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\financial-transactions.bridge.ts",
      "description": "Bridge file for financial-transactions route",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "financial-transactions.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\games-cerbos-example.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "games-cerbos-example",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\health.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "health",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\leagues.bridge.ts",
      "description": "Leagues Routes Bridge",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "leagues.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\pages.ts",
      "description": "Page permission endpoints for Cerbos-based access control",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "pages",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\performance.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "performance",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\reports.bridge.ts",
      "description": "Bridge file for reports routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "reports.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\resources.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "resources",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\teams.bridge.ts",
      "description": "Teams Routes Bridge",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "teams.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\tournaments.bridge.ts",
      "description": "Bridge file for tournaments routes",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "tournaments.bridge",
      "routeCount": 0,
      "routes": []
    },
    {
      "filePath": "backend\\src\\routes\\workflows.ts",
      "description": "",
      "imports": [],
      "exports": [],
      "hasTests": false,
      "category": "workflows",
      "routeCount": 0,
      "routes": []
    }
  ],
  "routes": [
    {
      "method": "GET",
      "path": "/chart-of-accounts",
      "lineNumber": 79,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "chart_of_accounts"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/accounting/chart-of-accounts",
        "List chart of accounts",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "POST",
      "path": "/chart-of-accounts",
      "lineNumber": 137,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "chart_of_accounts",
        "accounting_integrations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/accounting/chart-of-accounts",
        "Create a new account",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "GET",
      "path": "/integrations",
      "lineNumber": 210,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "accounting_integrations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/accounting/integrations",
        "List accounting integrations",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "POST",
      "path": "/integrations",
      "lineNumber": 247,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "accounting_integrations",
        "integration"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/accounting/integrations",
        "Create a new accounting integration",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "POST",
      "path": "/integrations/:id/test",
      "lineNumber": 301,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "accounting_integrations",
        "journal_entries as je",
        "journal_entry_lines as jel",
        "integration"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/accounting/integrations/:id/test",
        "Test accounting integration connection",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "GET",
      "path": "/journal-entries",
      "lineNumber": 348,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "journal_entries as je",
        "journal_entry_lines as jel"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/accounting/journal-entries",
        "List journal entries",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "POST",
      "path": "/journal-entries",
      "lineNumber": 436,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "chart_of_accounts",
        "journal_entries",
        "journal_entry_lines",
        "journal_entries as je",
        "journal_entry_lines as jel"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/accounting/journal-entries",
        "Create a new journal entry",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "POST",
      "path": "/journal-entries/:id/approve",
      "lineNumber": 560,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "journal_entries",
        "accounting_sync_logs as asl"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/accounting/journal-entries/:id/approve",
        "Approve a journal entry",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "GET",
      "path": "/sync-logs",
      "lineNumber": 608,
      "file": "backend\\src\\routes\\accounting-integration.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "accounting_sync_logs as asl"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/accounting/sync-logs",
        "List synchronization logs",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "accounting-integration",
      "fileDescription": "GET /api/accounting/chart-of-accounts"
    },
    {
      "method": "GET",
      "path": "/roles/:roleId/pages",
      "lineNumber": 124,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "page"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- Page Access Management ---",
        "GET /api/admin/access/roles/:roleId/pages",
        "Get all page access settings for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "PUT",
      "path": "/roles/:roleId/pages",
      "lineNumber": 160,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "page"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/access/roles/:roleId/pages",
        "Update page access settings for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/page-registry",
      "lineNumber": 239,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "page",
        "API"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/access/page-registry",
        "Get all available pages in the system",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/roles/:roleId/apis",
      "lineNumber": 262,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "API"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- API Access Management ---",
        "GET /api/admin/access/roles/:roleId/apis",
        "Get all API access settings for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "PUT",
      "path": "/roles/:roleId/apis",
      "lineNumber": 298,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "API"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/access/roles/:roleId/apis",
        "Update API access settings for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/api-registry",
      "lineNumber": 354,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "API",
        "feature"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/access/api-registry",
        "Get all available API endpoints in the system",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/roles/:roleId/features",
      "lineNumber": 377,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "feature",
        "features"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- Feature Management ---",
        "GET /api/admin/access/roles/:roleId/features",
        "Get all feature flags for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "PUT",
      "path": "/roles/:roleId/features",
      "lineNumber": 413,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "feature",
        "features"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/access/roles/:roleId/features",
        "Update feature flags for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/roles/:roleId/scopes",
      "lineNumber": 471,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "features"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- Data Scopes ---",
        "GET /api/admin/access/roles/:roleId/scopes",
        "Get data access scopes for a role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "POST",
      "path": "/check-page",
      "lineNumber": 509,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- Access Checking Endpoints ---",
        "POST /api/admin/access/check-page",
        "Check if current user can access a page",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "POST",
      "path": "/check-api",
      "lineNumber": 535,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/access/check-api",
        "Check if current user can access an API endpoint",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "POST",
      "path": "/check-feature",
      "lineNumber": 561,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/access/check-feature",
        "Check if current user has a feature enabled",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "POST",
      "path": "/clear-cache",
      "lineNumber": 589,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- Cache Management ---",
        "POST /api/admin/access/clear-cache",
        "Clear access control caches",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/my-pages",
      "lineNumber": 611,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "--- User Access Information ---",
        "GET /api/admin/access/my-pages",
        "Get all pages the current user can access",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/my-apis",
      "lineNumber": 628,
      "file": "backend\\src\\routes\\admin\\access.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/access/my-apis",
        "Get all API endpoints the current user can access",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Access Control API Routes"
    },
    {
      "method": "GET",
      "path": "/roles",
      "lineNumber": 143,
      "file": "backend\\src\\routes\\admin\\cerbos-policies.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "policy",
        "a",
        "permission"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/cerbos-policies/roles - List all roles from Cerbos",
        "Requires: cerbos_policy:view permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Cerbos Policy Management Routes"
    },
    {
      "method": "POST",
      "path": "/roles",
      "lineNumber": 184,
      "file": "backend\\src\\routes\\admin\\cerbos-policies.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "policy",
        "a",
        "permission",
        "const"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/cerbos-policies/roles - Create a new role in Cerbos",
        "Requires: cerbos_policy:create permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Cerbos Policy Management Routes"
    },
    {
      "method": "PUT",
      "path": "/roles/:roleName",
      "lineNumber": 243,
      "file": "backend\\src\\routes\\admin\\cerbos-policies.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "a",
        "permission",
        "const",
        "the",
        "policy",
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/cerbos-policies/roles/:roleName - Update a role in Cerbos",
        "Requires: cerbos_policy:update permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Cerbos Policy Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/roles/:roleName",
      "lineNumber": 321,
      "file": "backend\\src\\routes\\admin\\cerbos-policies.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role",
        "policy",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/cerbos-policies/roles/:roleName - Remove a role from Cerbos",
        "Requires: cerbos_policy:delete permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin Cerbos Policy Management Routes"
    },
    {
      "method": "GET",
      "path": "/status",
      "lineNumber": 31,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Apply authentication to all routes",
        "GET /api/admin/maintenance/status",
        "Get overall system maintenance status",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "POST",
      "path": "/gc",
      "lineNumber": 62,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/maintenance/gc",
        "Trigger garbage collection (if exposed)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "GET",
      "path": "/logs/size",
      "lineNumber": 101,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/maintenance/logs/size",
        "Get log file sizes and information",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "POST",
      "path": "/logs/rotate",
      "lineNumber": 154,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/maintenance/logs/rotate",
        "Rotate log files (if supported)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "GET",
      "path": "/database/stats",
      "lineNumber": 181,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/maintenance/database/stats",
        "Get basic database statistics",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "GET",
      "path": "/health",
      "lineNumber": 243,
      "file": "backend\\src\\routes\\admin\\maintenance.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Mount audit log cleanup routes",
        "GET /api/admin/maintenance/health",
        "Comprehensive system health check",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Maintenance Routes"
    },
    {
      "method": "GET",
      "path": "/flat",
      "lineNumber": 155,
      "file": "backend\\src\\routes\\admin\\permissions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/permissions/flat - Get all permissions as a flat list",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Permissions Routes"
    },
    {
      "method": "GET",
      "path": "/category/:category",
      "lineNumber": 180,
      "file": "backend\\src\\routes\\admin\\permissions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/permissions/category/:category - Get permissions by category",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Permissions Routes"
    },
    {
      "method": "GET",
      "path": "/categories",
      "lineNumber": 217,
      "file": "backend\\src\\routes\\admin\\permissions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/permissions/categories - Get all permission categories",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Permissions Routes"
    },
    {
      "method": "GET",
      "path": "/scan",
      "lineNumber": 30,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/rbac-registry/scan",
        "Perform automated scan of the codebase",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "GET",
      "path": "/unconfigured",
      "lineNumber": 64,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/rbac-registry/unconfigured",
        "Get all unconfigured items that need admin attention",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "GET",
      "path": "/stats",
      "lineNumber": 87,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/rbac-registry/stats",
        "Get registry statistics and overview",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "POST",
      "path": "/configure",
      "lineNumber": 110,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "rbac_page_permissions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/rbac-registry/configure",
        "Configure permissions for discovered items",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "POST",
      "path": "/auto-configure",
      "lineNumber": 175,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "rbac_page_permissions",
        "rbac_api_permissions",
        "rbac_scan_history"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/rbac-registry/auto-configure",
        "Automatically configure items using templates and suggestions",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "GET",
      "path": "/scan-history",
      "lineNumber": 258,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "rbac_scan_history",
        ", ",
        "\\n"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/rbac-registry/scan-history",
        "Get scan history",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "POST",
      "path": "/export-config",
      "lineNumber": 299,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "rbac_pages",
        "rbac_endpoints",
        "rbac_functions",
        ", ",
        "\\n"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/rbac-registry/export-config",
        "Export configuration updates for manual application",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "DELETE",
      "path": "/clear-configured",
      "lineNumber": 379,
      "file": "backend\\src\\routes\\admin\\rbac-registry.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "rbac_pages",
        "rbac_endpoints",
        "rbac_functions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/rbac-registry/clear-configured",
        "Clear all configured items from registry tables",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "RBAC Registry Routes"
    },
    {
      "method": "GET",
      "path": "/:roleId",
      "lineNumber": 335,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "Cerbos",
        "role",
        "or"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/roles/:roleId - Get specific role with permissions",
        "Requires: roles:read or system:admin permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "PUT",
      "path": "/:roleId",
      "lineNumber": 434,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role",
        "or",
        "Cerbos"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/roles/:roleId - Update role",
        "Requires: roles:update or system:admin permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:roleId",
      "lineNumber": 484,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role",
        "database",
        "Cerbos"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/roles/:roleId - Delete role",
        "Requires: roles:delete or system:admin permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "POST",
      "path": "/:roleId/permissions",
      "lineNumber": 528,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "database",
        "Cerbos"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/roles/:roleId/permissions - Assign permissions to role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:roleId/permissions",
      "lineNumber": 584,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/roles/:roleId/permissions - Remove permissions from role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "GET",
      "path": "/:roleId/users",
      "lineNumber": 625,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/roles/:roleId/users - Get users with this role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "POST",
      "path": "/:roleId/users",
      "lineNumber": 664,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/roles/:roleId/users - Add users to role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:roleId/users",
      "lineNumber": 707,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/roles/:roleId/users - Remove users from role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "PATCH",
      "path": "/:roleId/status",
      "lineNumber": 750,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PATCH /api/admin/roles/:roleId/status - Activate/deactivate role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "GET",
      "path": "/:roleId/hierarchy",
      "lineNumber": 798,
      "file": "backend\\src\\routes\\admin\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/roles/:roleId/hierarchy - Get role hierarchy (future feature)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": "Admin Role Management Routes"
    },
    {
      "method": "GET",
      "path": "/test",
      "lineNumber": 9,
      "file": "backend\\src\\routes\\admin\\test-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles",
        "permissions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "@ts-nocheck",
        "Test endpoint - no permission required, just authentication"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/public-test",
      "lineNumber": 39,
      "file": "backend\\src\\routes\\admin\\test-roles.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles",
        "permissions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Public test endpoint - no authentication required"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "admin",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/available-permissions",
      "lineNumber": 380,
      "file": "backend\\src\\routes\\admin\\unified-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/unified-roles/available-permissions - Get all available permissions from Cerbos",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Unified Role Management Routes"
    },
    {
      "method": "GET",
      "path": "/:name",
      "lineNumber": 451,
      "file": "backend\\src\\routes\\admin\\unified-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role_pages",
        "permissions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/unified-roles/:name - Get specific role details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Unified Role Management Routes"
    },
    {
      "method": "PUT",
      "path": "/:name",
      "lineNumber": 590,
      "file": "backend\\src\\routes\\admin\\unified-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role_pages",
        "existing",
        "permissions",
        "pages",
        "or",
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/unified-roles/:name - Update existing role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Unified Role Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:name",
      "lineNumber": 687,
      "file": "backend\\src\\routes\\admin\\unified-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "role",
        "database"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/unified-roles/:name - Delete role",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Unified Role Management Routes"
    },
    {
      "method": "GET",
      "path": "/:userId/roles",
      "lineNumber": 70,
      "file": "backend\\src\\routes\\admin\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles",
        "users",
        "roles",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/admin/users/:userId/roles",
        "Get all roles assigned to a user",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin User Management Routes"
    },
    {
      "method": "PUT",
      "path": "/:userId/roles",
      "lineNumber": 105,
      "file": "backend\\src\\routes\\admin\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "roles",
        "user_roles",
        "user"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/admin/users/:userId/roles",
        "Replace all roles for a user (complete replacement)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin User Management Routes"
    },
    {
      "method": "POST",
      "path": "/:userId/roles",
      "lineNumber": 190,
      "file": "backend\\src\\routes\\admin\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "roles",
        "user_roles",
        "user"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/admin/users/:userId/roles",
        "Add roles to a user (additive)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin User Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:userId/roles",
      "lineNumber": 275,
      "file": "backend\\src\\routes\\admin\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/admin/users/:userId/roles",
        "Remove roles from a user",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "admin",
      "fileDescription": "Admin User Management Routes"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 501,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_partner_preferences",
        "ai_assignment_rules",
        "rule",
        "data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/ai-assignment-rules/:id - Get specific rule"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 548,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rules",
        "rule",
        "data",
        "AI"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/ai-assignment-rules/:id - Update rule"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/partner-preferences",
      "lineNumber": 632,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_partner_preferences",
        "AI"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/ai-assignment-rules/:id/partner-preferences - Add partner preference"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id/partner-preferences/:prefId",
      "lineNumber": 687,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_partner_preferences",
        "ai_assignment_rules",
        "games",
        "users"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/ai-assignment-rules/:id/partner-preferences/:prefId - Delete partner preference"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/run",
      "lineNumber": 720,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rules",
        "games",
        "users",
        "ai_assignment_rule_runs"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/ai-assignment-rules/:id/run - Execute rule"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/runs",
      "lineNumber": 868,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rule_runs",
        "ai_assignment_rules"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/ai-assignment-rules/:id/runs - Get rule run history"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/runs/:runId",
      "lineNumber": 902,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rule_runs",
        "ai_assignment_rules"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/ai-assignment-rules/runs/:runId - Get detailed run results"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/toggle",
      "lineNumber": 935,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rules",
        "ai_assignment_rule_runs"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/ai-assignment-rules/:id/toggle - Toggle rule enabled status"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 972,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rules",
        "ai_assignment_rule_runs"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/ai-assignment-rules/:id - Delete rule"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/analytics",
      "lineNumber": 1005,
      "file": "backend\\src\\routes\\ai-assignment-rules.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "ai_assignment_rule_runs",
        "ai_assignment_rules"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/ai-assignment-rules/analytics - Get performance analytics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-assignment-rules",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id/accept",
      "lineNumber": 848,
      "file": "backend\\src\\routes\\ai-suggestions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments",
        "suggestion",
        "ai_suggestions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/ai-suggestions/:id/accept - Accept suggestion and create assignment",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-suggestions",
      "fileDescription": "@file ai-suggestions.ts"
    },
    {
      "method": "PUT",
      "path": "/:id/reject",
      "lineNumber": 969,
      "file": "backend\\src\\routes\\ai-suggestions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "suggestion",
        "ai_suggestions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/ai-suggestions/:id/reject - Reject suggestion with optional reason",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "ai-suggestions",
      "fileDescription": "@file ai-suggestions.ts"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 231,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "assets"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get single asset by ID with detailed information"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 351,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset",
        "assets",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update asset"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/maintenance",
      "lineNumber": 408,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset_maintenance",
        "maintenance"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "ASSET MAINTENANCE ENDPOINTS",
        "Get maintenance records for an asset"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/maintenance",
      "lineNumber": 439,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset_maintenance",
        "maintenance",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Create maintenance record"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/maintenance/:maintenanceId",
      "lineNumber": 480,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "maintenance",
        "asset_maintenance",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update maintenance record"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/checkout",
      "lineNumber": 540,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset_checkouts",
        "asset",
        "assets"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "ASSET CHECKOUT/CHECKIN ENDPOINTS",
        "Check out asset to employee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/checkout/:checkoutId/checkin",
      "lineNumber": 623,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset",
        "assets",
        "checkout",
        "asset_checkouts"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Check in asset from employee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/stats/overview",
      "lineNumber": 692,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "asset",
        "assets"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get asset statistics and analytics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/maintenance/due",
      "lineNumber": 759,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get assets due for maintenance"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/checkouts/overdue",
      "lineNumber": 798,
      "file": "backend\\src\\routes\\assets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get overdue checkouts"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assets",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 778,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Route definitions with proper typing"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/bulk-update",
      "lineNumber": 789,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/bulk-remove",
      "lineNumber": 807,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "PATCH",
      "path": "/:id/status",
      "lineNumber": 819,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 835,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/bulk",
      "lineNumber": 841,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/check-conflicts",
      "lineNumber": 858,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/available-referees/:game_id",
      "lineNumber": 868,
      "file": "backend\\src\\routes\\assignments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "assignments",
      "fileDescription": "Assignment management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/login",
      "lineNumber": 484,
      "file": "backend\\src\\routes\\auth.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Route definitions with middleware and proper typing"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "auth",
      "fileDescription": "Authentication routes with comprehensive TypeScript typing"
    },
    {
      "method": "POST",
      "path": "/register",
      "lineNumber": 490,
      "file": "backend\\src\\routes\\auth.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Route definitions with middleware and proper typing"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "auth",
      "fileDescription": "Authentication routes with comprehensive TypeScript typing"
    },
    {
      "method": "GET",
      "path": "/me",
      "lineNumber": 496,
      "file": "backend\\src\\routes\\auth.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "auth",
      "fileDescription": "Authentication routes with comprehensive TypeScript typing"
    },
    {
      "method": "POST",
      "path": "/refresh-permissions",
      "lineNumber": 501,
      "file": "backend\\src\\routes\\auth.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "auth",
      "fileDescription": "Authentication routes with comprehensive TypeScript typing"
    },
    {
      "method": "POST",
      "path": "/check-page-access",
      "lineNumber": 662,
      "file": "backend\\src\\routes\\auth.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "auth",
      "fileDescription": "Authentication routes with comprehensive TypeScript typing"
    },
    {
      "method": "GET",
      "path": "/referees/:id",
      "lineNumber": 218,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_availability",
        "referees",
        "availability"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/availability/referees/:id - Get referee's availability windows"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/referees/:id",
      "lineNumber": 250,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referees",
        "referee_availability",
        "availability",
        "your",
        "window"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/availability/referees/:id - Create availability window"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:windowId",
      "lineNumber": 305,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_availability",
        "referee_availability as ra",
        "availability",
        "your",
        "window"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/availability/:windowId - Update availability window"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "DELETE",
      "path": "/:windowId",
      "lineNumber": 364,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_availability",
        "referee_availability as ra",
        "game_assignments as ga",
        "window"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/availability/:windowId - Delete availability window"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/conflicts",
      "lineNumber": 392,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_availability",
        "referee_availability as ra",
        "game_assignments as ga",
        "referees"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/availability/conflicts - Check for scheduling conflicts"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/bulk",
      "lineNumber": 453,
      "file": "backend\\src\\routes\\availability.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referees"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/availability/bulk - Bulk create availability windows"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "availability",
      "fileDescription": "Availability Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/utilization",
      "lineNumber": 14,
      "file": "backend\\src\\routes\\budget-tracker.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments as ga",
        "expense_data as ed"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/budgets/utilization",
        "Get current budget utilization data - simplified version of financial dashboard logic",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budget-tracker",
      "fileDescription": "GET /api/budgets/utilization"
    },
    {
      "method": "GET",
      "path": "/categories",
      "lineNumber": 129,
      "file": "backend\\src\\routes\\budget-tracker.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/budgets/categories",
        "Get simplified budget categories list",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budget-tracker",
      "fileDescription": "GET /api/budgets/utilization"
    },
    {
      "method": "GET",
      "path": "/periods",
      "lineNumber": 185,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_periods"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/budgets/periods",
        "List budget periods",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/periods",
      "lineNumber": 285,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_periods"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/budgets/periods",
        "Create a new budget period",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/categories",
      "lineNumber": 363,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/budgets/categories",
        "List budget categories",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/categories",
      "lineNumber": 454,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/budgets/categories",
        "Create a new budget category",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 724,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets",
        "a"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/budgets/:id",
        "Get a specific budget",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 770,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets",
        "a",
        "error",
        "budget"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/budgets/:id",
        "Update a budget",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/:id/allocations",
      "lineNumber": 837,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets",
        "budget_allocations",
        "budget_periods",
        "error",
        "budget"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/budgets/:id/allocations",
        "Create budget allocation",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/periods/:id",
      "lineNumber": 909,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_periods",
        "budgets",
        "budget_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/budgets/periods/:id",
        "Delete a budget period",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/categories/:id",
      "lineNumber": 972,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budget_categories",
        "budgets",
        "budget_allocations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/budgets/categories/:id",
        "Delete a budget category",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 1035,
      "file": "backend\\src\\routes\\budgets.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets",
        "budget_allocations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/budgets/:id",
        "Delete a budget",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "budgets",
      "fileDescription": "Budget Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/referees/:id/calendar/ical",
      "lineNumber": 306,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/calendar/referees/:id/calendar/ical - Get iCal feed for specific referee",
        "@route GET /api/calendar/referees/:id/calendar/ical",
        "@access Public (no authentication required for calendar feeds)",
        "@param {string} id - Referee ID",
        "@param {CalendarQueryParams} query - Query parameters for calendar filtering",
        "@returns {string} iCal formatted calendar content",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/games/calendar-feed",
      "lineNumber": 421,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/calendar/games/calendar-feed - Get iCal feed for all games or filtered games",
        "@route GET /api/calendar/games/calendar-feed",
        "@access Private (Authenticated users)",
        "@param {GameCalendarQueryParams} query - Query parameters for filtering games",
        "@returns {string} iCal formatted calendar content",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "POST",
      "path": "/sync",
      "lineNumber": 594,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "organization_settings",
        "organization"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/calendar/sync - Configure calendar synchronization",
        "@route POST /api/calendar/sync",
        "@access Private (Admin only)",
        "@param {CalendarSyncRequest} body - Calendar sync configuration",
        "@returns {CalendarSyncResponse} Sync configuration response",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/sync/status",
      "lineNumber": 706,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "organization_settings"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/calendar/sync/status - Get calendar sync status",
        "@route GET /api/calendar/sync/status",
        "@access Private (Admin only)",
        "@returns {CalendarSyncStatusResponse} Calendar sync status",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "DELETE",
      "path": "/sync",
      "lineNumber": 772,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "organization_settings"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/calendar/sync - Disable calendar sync",
        "@route DELETE /api/calendar/sync",
        "@access Private (Admin only)",
        "@returns {CalendarSyncResponse} Sync disable response",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "POST",
      "path": "/upload",
      "lineNumber": 840,
      "file": "backend\\src\\routes\\calendar.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/calendar/upload - Upload and import ICS calendar file",
        "@route POST /api/calendar/upload",
        "@access Private (Admin or assignor role)",
        "@param {File} file - ICS calendar file",
        "@param {CalendarUploadOptions} body - Import options",
        "@returns {CalendarUploadResponse} Import results",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "calendar",
      "fileDescription": "Calendar routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/resources",
      "lineNumber": 40,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/resources/:kind",
      "lineNumber": 61,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/resources",
      "lineNumber": 92,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "resource",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/resources/:kind",
      "lineNumber": 133,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "resource",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/resources/:kind",
      "lineNumber": 177,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "resource"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/resources/:kind/actions",
      "lineNumber": 209,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/resources/:kind/actions",
      "lineNumber": 245,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/resources/:kind/actions/:action",
      "lineNumber": 294,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/resources/:kind/roles/:role",
      "lineNumber": 327,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/resources/:kind/roles/:role",
      "lineNumber": 358,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/reload",
      "lineNumber": 401,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/derived-roles",
      "lineNumber": 431,
      "file": "backend\\src\\routes\\cerbos.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "cerbos",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 347,
      "file": "backend\\src\\routes\\chunks.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_chunks",
        "chunk_games",
        "chunk"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/chunks/:id - Get specific chunk with games"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "chunks",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 427,
      "file": "backend\\src\\routes\\chunks.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_chunks",
        "chunk_games",
        "games",
        "chunk",
        "basic"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/chunks/:id - Update chunk"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "chunks",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/assign",
      "lineNumber": 562,
      "file": "backend\\src\\routes\\chunks.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_chunks",
        "chunk_games",
        "game_assignments",
        "chunk"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/chunks/:id/assign - Assign referee to chunk"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "chunks",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 672,
      "file": "backend\\src\\routes\\chunks.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_chunks",
        "chunk_games",
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/chunks/:id - Delete chunk"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "chunks",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/auto-create",
      "lineNumber": 734,
      "file": "backend\\src\\routes\\chunks.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_chunks",
        "chunk_games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/chunks/auto-create - Auto-create chunks"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "chunks",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 119,
      "file": "backend\\src\\routes\\communications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "communication"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get single communication by ID",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "communications",
      "fileDescription": "Communications Routes - TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/unread/count",
      "lineNumber": 433,
      "file": "backend\\src\\routes\\communications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get user's unread communications count",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "communications",
      "fileDescription": "Communications Routes - TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 364,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/company-credit-cards/:id",
        "Get specific credit card details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 486,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards",
        "users",
        "credit",
        "data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/company-credit-cards/:id",
        "Update credit card",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "GET",
      "path": "/:id/transactions",
      "lineNumber": 691,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards",
        "expense_data",
        "error",
        "credit"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/company-credit-cards/:id/transactions",
        "Get credit card transactions (mock data for now)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "POST",
      "path": "/:id/assign",
      "lineNumber": 829,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards",
        "users",
        "card"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/company-credit-cards/:id/assign",
        "Assign credit card to user",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "POST",
      "path": "/:id/block",
      "lineNumber": 924,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/company-credit-cards/:id/block",
        "Block/unblock credit card",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "POST",
      "path": "/:id/unblock",
      "lineNumber": 987,
      "file": "backend\\src\\routes\\company-credit-cards.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "company_credit_cards"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/company-credit-cards/:id/unblock",
        "Unblock credit card",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "company-credit-cards",
      "fileDescription": "GET /api/company-credit-cards"
    },
    {
      "method": "GET",
      "path": "/items",
      "lineNumber": 20,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Helper function to generate slug from title",
        "GET /api/content/items - List content items"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/items/slug/:slug",
      "lineNumber": 89,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/content/items/slug/:slug - Get content item by slug"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/items",
      "lineNumber": 120,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/content/items - Create new content item"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/items/:id",
      "lineNumber": 246,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories",
        "content"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/content/items/:id - Update content item"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/items/:id",
      "lineNumber": 381,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/content/items/:id - Delete content item"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/items/:id",
      "lineNumber": 409,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/content/items/:id - Get single content item"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/items/slug/:slug",
      "lineNumber": 440,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_items",
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/content/items/slug/:slug - Get content item by slug"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/categories",
      "lineNumber": 471,
      "file": "backend\\src\\routes\\content.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "content_categories"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/content/categories - List categories"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "content",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 299,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/documents/:id",
        "Get a specific document with version history",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/:id/versions",
      "lineNumber": 484,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "document_versions",
        "const",
        "document",
        "documents"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/documents/:id/versions",
        "Upload new version of existing document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 613,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "document",
        "query",
        "documents",
        "event",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/documents/:id",
        "Update document metadata",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/:id/approve",
      "lineNumber": 693,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "event",
        "documents"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/documents/:id/approve",
        "Approve a document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/:id/archive",
      "lineNumber": 744,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "documents"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/documents/:id/archive",
        "Archive a document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/:id/download",
      "lineNumber": 795,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/documents/:id/download",
        "Download a document file",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/:id/acknowledge",
      "lineNumber": 847,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "document_acknowledgments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/documents/:id/acknowledge",
        "Record document acknowledgment",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/:id/acknowledgments",
      "lineNumber": 932,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/documents/:id/acknowledgments",
        "Get acknowledgments for a document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/stats/overview",
      "lineNumber": 993,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/documents/stats/overview",
        "Get document statistics overview",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/acknowledgments/pending",
      "lineNumber": 1085,
      "file": "backend\\src\\routes\\documents.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/documents/acknowledgments/pending",
        "Get pending acknowledgments for current user",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "documents",
      "fileDescription": "Document Management Routes (TypeScript)"
    },
    {
      "method": "GET",
      "path": "/departments",
      "lineNumber": 81,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "departments",
        "department"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DEPARTMENTS ENDPOINTS",
        "Get all departments with hierarchy"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/departments",
      "lineNumber": 134,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "departments",
        "department"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Create new department"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/departments/:id",
      "lineNumber": 162,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "departments",
        "job_positions",
        "department"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update department"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/positions",
      "lineNumber": 195,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "job_positions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "JOB POSITIONS ENDPOINTS",
        "Get all positions"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/positions",
      "lineNumber": 238,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "job_positions"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Create new position"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 399,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "employees",
        "employee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get single employee by ID"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 478,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "employee",
        "employees",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update employee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/evaluations",
      "lineNumber": 531,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "employee_evaluations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "EMPLOYEE EVALUATIONS ENDPOINTS",
        "Get evaluations for an employee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/evaluations",
      "lineNumber": 554,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "employee_evaluations",
        "training_records"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Create new evaluation"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/training",
      "lineNumber": 604,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "training_records",
        "training",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "TRAINING RECORDS ENDPOINTS",
        "Get training records for an employee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/training",
      "lineNumber": 629,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "training_records",
        "training",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Create new training record"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/training/:trainingId",
      "lineNumber": 675,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "training",
        "training_records",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update training record"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/stats/overview",
      "lineNumber": 722,
      "file": "backend\\src\\routes\\employees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "training_records",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get organization-wide employee statistics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "employees",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/receipts/upload",
      "lineNumber": 201,
      "file": "backend\\src\\routes\\expenses.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/expenses/receipts/upload",
        "Upload a receipt file",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "expenses",
      "fileDescription": "POST /api/expenses/receipts/upload"
    },
    {
      "method": "GET",
      "path": "/receipts",
      "lineNumber": 418,
      "file": "backend\\src\\routes\\expenses.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/expenses/receipts",
        "List receipts with filtering and pagination - OPTIMIZED VERSION",
        "Requires: expenses:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "expenses",
      "fileDescription": "POST /api/expenses/receipts/upload"
    },
    {
      "method": "GET",
      "path": "/receipts/:id",
      "lineNumber": 569,
      "file": "backend\\src\\routes\\expenses.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts",
        "ai_processing_logs"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/expenses/receipts/:id",
        "Get detailed receipt information",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "expenses",
      "fileDescription": "POST /api/expenses/receipts/upload"
    },
    {
      "method": "GET",
      "path": "/referee-payments",
      "lineNumber": 579,
      "file": "backend\\src\\routes\\financial-dashboard.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-dashboard/referee-payments",
        "Get detailed referee payment information",
        "Requires: finance:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-dashboard",
      "fileDescription": "Financial Dashboard API Routes"
    },
    {
      "method": "GET",
      "path": "/budget-variance",
      "lineNumber": 83,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets as b"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/budget-variance",
        "Generate budget variance report",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/cash-flow",
      "lineNumber": 219,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_transactions",
        "cash_flow_forecasts",
        "financial_transactions as ft"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/cash-flow",
        "Generate cash flow report",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/expense-analysis",
      "lineNumber": 377,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_transactions as ft"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/expense-analysis",
        "Generate detailed expense analysis report",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/payroll-summary",
      "lineNumber": 571,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments as ga"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/payroll-summary",
        "Generate payroll summary report",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/kpis",
      "lineNumber": 728,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets as b",
        "financial_transactions",
        "financial_transactions as ft",
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/kpis",
        "Get financial KPIs dashboard",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "POST",
      "path": "/kpis",
      "lineNumber": 882,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_kpis",
        "a"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/financial-reports/kpis",
        "Create or update a KPI configuration",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/export/:type",
      "lineNumber": 922,
      "file": "backend\\src\\routes\\financial-reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial-reports/export/:type",
        "Export financial report as CSV",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "financial-reports",
      "fileDescription": "GET /api/financial-reports/budget-variance"
    },
    {
      "method": "GET",
      "path": "/transactions",
      "lineNumber": 135,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_transactions",
        "financial_transactions as ft"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial/transactions",
        "List financial transactions with filtering",
        "Requires: finance:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "POST",
      "path": "/transactions",
      "lineNumber": 270,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "budgets",
        "vendors",
        "financial_transactions",
        "financial_transactions as ft",
        "budget",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/financial/transactions",
        "Create a new financial transaction",
        "Requires: finance:manage permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "GET",
      "path": "/transactions/:id",
      "lineNumber": 383,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_transactions as ft",
        "journal_entries",
        "financial_transactions",
        "transaction"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial/transactions/:id",
        "Get detailed transaction information",
        "Requires: finance:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "PUT",
      "path": "/transactions/:id/status",
      "lineNumber": 445,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "journal_entries",
        "financial_transactions",
        "budgets",
        "transaction",
        "error"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/financial/transactions/:id/status",
        "Update transaction status",
        "Requires: finance:approve permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "GET",
      "path": "/vendors",
      "lineNumber": 537,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "vendors",
        "error",
        "transaction",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial/vendors",
        "List vendors",
        "Requires: finance:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "POST",
      "path": "/vendors",
      "lineNumber": 595,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "vendors",
        "financial_transactions",
        "budgets",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/financial/vendors",
        "Create a new vendor",
        "Requires: finance:manage permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "GET",
      "path": "/dashboard",
      "lineNumber": 660,
      "file": "backend\\src\\routes\\financial-transactions.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "financial_transactions",
        "budgets",
        "financial_transactions as ft"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/financial/dashboard",
        "Get financial dashboard data",
        "Requires: finance:read permission",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "financial-transactions",
      "fileDescription": "Financial Transactions API Routes"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 274,
      "file": "backend\\src\\routes\\game-fees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_fees",
        "game_fees as gf",
        "an",
        "object",
        "the"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/game-fees/:id",
        "Update an existing game fee",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "game-fees",
      "fileDescription": "GET /api/game-fees"
    },
    {
      "method": "GET",
      "path": "/stats",
      "lineNumber": 337,
      "file": "backend\\src\\routes\\game-fees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_fees as gf",
        "game_fees"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/game-fees/stats",
        "Get game fee statistics and summaries",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "game-fees",
      "fileDescription": "GET /api/game-fees"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 1035,
      "file": "backend\\src\\routes\\games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "============================================================================",
        "GET /api/games - Get all games with optional filters",
        "Note: validateQuery runs before authenticateToken to ensure proper error codes for invalid parameters",
        "GET /api/games/:id - Get specific game"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "games",
      "fileDescription": "Game management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 1049,
      "file": "backend\\src\\routes\\games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/games - Create new game",
        "PUT /api/games/:id - Update game"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "games",
      "fileDescription": "Game management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "PATCH",
      "path": "/:id/status",
      "lineNumber": 1057,
      "file": "backend\\src\\routes\\games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/games/:id - Update game",
        "PATCH /api/games/:id/status - Update game status"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "games",
      "fileDescription": "Game management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 1065,
      "file": "backend\\src\\routes\\games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PATCH /api/games/:id/status - Update game status",
        "DELETE /api/games/:id - Delete game"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "games",
      "fileDescription": "Game management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/bulk-import",
      "lineNumber": 1074,
      "file": "backend\\src\\routes\\games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/games/:id - Delete game",
        "POST /api/games/bulk-import - Bulk import games"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "games",
      "fileDescription": "Game management routes for the Sports Management API (TypeScript)"
    },
    {
      "method": "POST",
      "path": "/apply",
      "lineNumber": 293,
      "file": "backend\\src\\routes\\historic-patterns.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "assignment_patterns",
        "game_assignments",
        "pattern"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/assignments/patterns/apply - Apply pattern to games"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "historic-patterns",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/analyze",
      "lineNumber": 407,
      "file": "backend\\src\\routes\\historic-patterns.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/assignments/patterns/analyze - Analyze patterns"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "historic-patterns",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 509,
      "file": "backend\\src\\routes\\historic-patterns.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "assignment_patterns",
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/assignments/patterns/:id - Get specific pattern"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "historic-patterns",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 576,
      "file": "backend\\src\\routes\\historic-patterns.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "assignment_patterns"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/assignments/patterns/:id - Delete pattern"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "historic-patterns",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:token",
      "lineNumber": 234,
      "file": "backend\\src\\routes\\invitations.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "invitations",
        "users"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/invitations/:token - Get invitation by token"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "invitations",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:token/complete",
      "lineNumber": 266,
      "file": "backend\\src\\routes\\invitations.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "invitations",
        "users"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/invitations/:token/complete - Complete invitation signup"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "invitations",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 372,
      "file": "backend\\src\\routes\\invitations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "invitations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/invitations/:id - Cancel invitation (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "invitations",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 244,
      "file": "backend\\src\\routes\\leagues.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "teams",
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/leagues/:id - Get specific league with teams"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "leagues",
      "fileDescription": "Leagues Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/bulk",
      "lineNumber": 350,
      "file": "backend\\src\\routes\\leagues.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "league"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/leagues/bulk - Create multiple leagues"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "leagues",
      "fileDescription": "Leagues Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 416,
      "file": "backend\\src\\routes\\leagues.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "teams",
        "games",
        "league"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/leagues/:id - Update league"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "leagues",
      "fileDescription": "Leagues Routes - TypeScript Implementation"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 446,
      "file": "backend\\src\\routes\\leagues.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "teams",
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Invalidate related caches",
        "DELETE /api/leagues/:id - Delete league"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "leagues",
      "fileDescription": "Leagues Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/options/filters",
      "lineNumber": 483,
      "file": "backend\\src\\routes\\leagues.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "games",
        "leagues"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Invalidate related caches",
        "GET /api/leagues/options/filters - Get filter options for dropdowns"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "leagues",
      "fileDescription": "Leagues Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 115,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "locations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get location by ID",
        "Requires: locations:read permission"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 241,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "locations",
        "location",
        "or"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update location",
        "Requires: locations:update or system:manage permission"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 355,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "locations",
        "games",
        "user_location_distances",
        "location"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Deactivate location - soft delete",
        "Requires: locations:delete or system:manage permission"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/distances",
      "lineNumber": 390,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "locations",
        "user_location_distances"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get distances for current user to all locations"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:locationId/distance",
      "lineNumber": 444,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_location_distances",
        "users",
        "locations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get distance to a specific location for current user"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/admin/distance-stats",
      "lineNumber": 477,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "locations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Admin endpoint: Get distance calculation statistics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/admin/calculate-user-distances/:userId",
      "lineNumber": 493,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "locations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Admin endpoint: Trigger distance calculation for a specific user"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/admin/calculate-location-distances/:locationId",
      "lineNumber": 533,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "locations"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Admin endpoint: Trigger distance calculation for a specific location"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/admin/retry-failed-calculations",
      "lineNumber": 574,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Admin endpoint: Retry failed distance calculations"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/admin/initialize-all-distances",
      "lineNumber": 607,
      "file": "backend\\src\\routes\\locations.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Admin endpoint: Initialize all distance calculations"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "locations",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/games",
      "lineNumber": 170,
      "file": "backend\\src\\routes\\mentee-games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "===== ROUTES =====",
        "GET /api/mentees/:id/games",
        "Get mentee's game assignments with comprehensive details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentee-games",
      "fileDescription": "Mentee Games Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/games/upcoming",
      "lineNumber": 259,
      "file": "backend\\src\\routes\\mentee-games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentees/:id/games/upcoming",
        "Get mentee's upcoming game assignments",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "mentee-games",
      "fileDescription": "Mentee Games Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/games/history",
      "lineNumber": 350,
      "file": "backend\\src\\routes\\mentee-games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentees/:id/games/history",
        "Get mentee's game history with performance analytics",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentee-games",
      "fileDescription": "Mentee Games Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/games/analytics",
      "lineNumber": 492,
      "file": "backend\\src\\routes\\mentee-games.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments as ga"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentees/:id/games/analytics",
        "Get comprehensive analytics for mentee's refereeing performance",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "mentee-games",
      "fileDescription": "Mentee Games Management API Routes"
    },
    {
      "method": "GET",
      "path": "/my-mentees",
      "lineNumber": 82,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Document upload functionality provided by mentorshipFileUpload middleware",
        "===== MAIN MENTORSHIP ROUTES =====",
        "GET /api/mentorships/my-mentees",
        "Get mentor's assigned mentees",
        "Query params: status, include_details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 228,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "mentorship",
        "their",
        "any"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentorships/:id",
        "Get specific mentorship details with full information",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 305,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "mentorship",
        "their",
        "any",
        "method",
        "this"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/mentorships/:id",
        "Update mentorship (mentor can update their mentorships, admin can update any)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 355,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "this",
        "mentorship"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/mentorships/:id",
        "End mentorship (admin only)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/stats",
      "lineNumber": 389,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentorships/:id/stats",
        "Get mentorship statistics (for mentors)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/notes",
      "lineNumber": 429,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "existing"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "===== MENTORSHIP NOTES ROUTES =====",
        "GET /api/mentorships/:id/notes",
        "Get all notes for a mentorship with pagination and filtering",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "POST",
      "path": "/:id/notes",
      "lineNumber": 475,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "existing",
        "this",
        "note"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/mentorships/:id/notes",
        "Create new note for mentorship (mentors only)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "PUT",
      "path": "/:id/notes/:noteId",
      "lineNumber": 520,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "existing",
        "this",
        "note"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/mentorships/:id/notes/:noteId",
        "Update existing note",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "DELETE",
      "path": "/:id/notes/:noteId",
      "lineNumber": 556,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "this",
        "note"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/mentorships/:id/notes/:noteId",
        "Delete note",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/documents",
      "lineNumber": 596,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "===== DOCUMENT MANAGEMENT ROUTES =====",
        "GET /api/mentorships/:id/documents",
        "List documents for mentorship",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "POST",
      "path": "/:id/documents",
      "lineNumber": 638,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/mentorships/:id/documents",
        "Upload document for mentorship",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/:id/documents/:docId",
      "lineNumber": 696,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/mentorships/:id/documents/:docId",
        "Download document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "DELETE",
      "path": "/:id/documents/:docId",
      "lineNumber": 734,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/mentorships/:id/documents/:docId",
        "Delete document",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/available-mentors/:menteeId",
      "lineNumber": 774,
      "file": "backend\\src\\routes\\mentorships.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "===== UTILITY ROUTES =====",
        "GET /api/mentorships/available-mentors/:menteeId",
        "Get available mentors for a specific mentee (admin only)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "mentorships",
      "fileDescription": "Mentorship Management API Routes"
    },
    {
      "method": "GET",
      "path": "/unread-count",
      "lineNumber": 211,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "PATCH",
      "path": "/:id/read",
      "lineNumber": 212,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "PATCH",
      "path": "/mark-all-read",
      "lineNumber": 213,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 214,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "GET",
      "path": "/preferences",
      "lineNumber": 215,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "PATCH",
      "path": "/preferences",
      "lineNumber": 216,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "POST",
      "path": "/broadcast",
      "lineNumber": 219,
      "file": "backend\\src\\routes\\notifications.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Routes",
        "Broadcast notification (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "notifications",
      "fileDescription": "GET /api/notifications - Get user's notifications"
    },
    {
      "method": "GET",
      "path": "/settings",
      "lineNumber": 11,
      "file": "backend\\src\\routes\\organization.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "organization_settings",
        "organization",
        "const",
        "existing"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "@ts-nocheck",
        "Get organization settings"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organization",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/settings",
      "lineNumber": 52,
      "file": "backend\\src\\routes\\organization.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "organization_settings",
        "organization",
        "const",
        "existing",
        "clearSettingsCache"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update organization settings"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organization",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/employees/performance",
      "lineNumber": 63,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "EMPLOYEE ANALYTICS ENDPOINTS",
        "Get comprehensive employee performance dashboard"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/employees/retention",
      "lineNumber": 142,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get employee retention and turnover analytics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/employees/training",
      "lineNumber": 242,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get training and development analytics"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/health/overview",
      "lineNumber": 334,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "ORGANIZATIONAL HEALTH METRICS",
        "Get overall organizational health dashboard"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/predictions/staffing",
      "lineNumber": 467,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PREDICTIVE ANALYTICS",
        "Get staffing predictions"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/predictions/performance",
      "lineNumber": 549,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get performance trends and predictions"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/costs/per-employee",
      "lineNumber": 614,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "COST ANALYTICS",
        "Get cost per employee analysis"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/dashboard/executive",
      "lineNumber": 695,
      "file": "backend\\src\\routes\\organizational-analytics.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Get comprehensive organizational dashboard"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "organizational-analytics",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 327,
      "file": "backend\\src\\routes\\payment-methods.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "payment_methods",
        "payment",
        "data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/payment-methods/:id",
        "Get specific payment method details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "payment-methods",
      "fileDescription": "GET /api/payment-methods"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 376,
      "file": "backend\\src\\routes\\payment-methods.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "payment_methods",
        "payment",
        "data",
        "error"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/payment-methods/:id",
        "Update payment method",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "payment-methods",
      "fileDescription": "GET /api/payment-methods"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 476,
      "file": "backend\\src\\routes\\payment-methods.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "payment_methods",
        "expense_data",
        "error",
        "payment"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/payment-methods/:id",
        "Deactivate payment method (soft delete)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "payment-methods",
      "fileDescription": "GET /api/payment-methods"
    },
    {
      "method": "GET",
      "path": "/:id/rules",
      "lineNumber": 537,
      "file": "backend\\src\\routes\\payment-methods.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "payment_methods"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/payment-methods/:id/rules",
        "Get approval rules for payment method",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "payment-methods",
      "fileDescription": "GET /api/payment-methods"
    },
    {
      "method": "GET",
      "path": "/categories",
      "lineNumber": 150,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "post_categories",
        "posts",
        "post_media",
        "post_reads"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/posts/categories - Get all post categories"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 170,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "post_categories",
        "posts",
        "post_media",
        "post_reads"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/posts/:id - Get specific post"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 275,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "posts",
        "post"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/posts/:id - Update post (Admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 331,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "posts",
        "post_media",
        "post_reads",
        "post"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/posts/:id - Delete post (Admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/:id/media",
      "lineNumber": 360,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "posts",
        "post_media",
        "post_reads"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/posts/:id/media - Upload media for post (Admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id/reads",
      "lineNumber": 407,
      "file": "backend\\src\\routes\\posts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "post_media",
        "post_reads"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/posts/:id/reads - Get read receipts for post (Admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "posts",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 334,
      "file": "backend\\src\\routes\\purchase-orders.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "purchase_orders"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/purchase-orders/:id",
        "Get purchase order details",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "purchase-orders",
      "fileDescription": "GET /api/purchase-orders"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 468,
      "file": "backend\\src\\routes\\purchase-orders.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "purchase_orders",
        "purchase",
        "data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/purchase-orders/:id",
        "Update purchase order (only in draft status)",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "purchase-orders",
      "fileDescription": "GET /api/purchase-orders"
    },
    {
      "method": "POST",
      "path": "/:id/approve",
      "lineNumber": 630,
      "file": "backend\\src\\routes\\purchase-orders.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "purchase_orders",
        "error",
        "purchase",
        "approval",
        "budget"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/purchase-orders/:id/approve",
        "Approve or reject purchase order",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "purchase-orders",
      "fileDescription": "GET /api/purchase-orders"
    },
    {
      "method": "POST",
      "path": "/:id/reject",
      "lineNumber": 728,
      "file": "backend\\src\\routes\\purchase-orders.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "purchase_orders",
        "expense_data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/purchase-orders/:id/reject",
        "Reject purchase order",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "purchase-orders",
      "fileDescription": "GET /api/purchase-orders"
    },
    {
      "method": "GET",
      "path": "/:id/expenses",
      "lineNumber": 755,
      "file": "backend\\src\\routes\\purchase-orders.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "purchase_orders",
        "expense_data"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/purchase-orders/:id/expenses",
        "Get expenses linked to purchase order",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "purchase-orders",
      "fileDescription": "GET /api/purchase-orders"
    },
    {
      "method": "POST",
      "path": "/upload",
      "lineNumber": 141,
      "file": "backend\\src\\routes\\receipts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts",
        "expense_receipts as r"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/receipts/upload",
        "Upload a new receipt",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "receipts",
      "fileDescription": "GET /api/receipts"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 192,
      "file": "backend\\src\\routes\\receipts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts as r",
        "expense_receipts",
        "status",
        "database"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/receipts/:id",
        "Get a specific receipt",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "receipts",
      "fileDescription": "GET /api/receipts"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 239,
      "file": "backend\\src\\routes\\receipts.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "expense_receipts",
        "status",
        "with",
        "database"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/receipts/:id",
        "Delete a receipt",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "receipts",
      "fileDescription": "GET /api/receipts"
    },
    {
      "method": "PUT",
      "path": "/:refereeId/assign",
      "lineNumber": 34,
      "file": "backend\\src\\routes\\referee-levels.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_levels",
        "referees",
        "games",
        "referee",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/referee-levels/:refereeId/assign - Assign referee to a level (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-levels",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/check-assignment/:gameId/:refereeId",
      "lineNumber": 77,
      "file": "backend\\src\\routes\\referee-levels.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "referees",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referee-levels/check-assignment/:gameId/:refereeId - Check if referee can be assigned to game"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-levels",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 87,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_roles",
        "user_referee_roles",
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referee-roles/:id - Get specific referee role"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 179,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_roles",
        "user_referee_roles",
        "referee",
        "role"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/referee-roles/:id - Update referee role (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 235,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_roles",
        "user_referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Parse permissions for response",
        "DELETE /api/referee-roles/:id - Delete referee role (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/assign",
      "lineNumber": 282,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_roles",
        "users",
        "user_referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/referee-roles/assign - Assign role to referee (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "POST",
      "path": "/remove",
      "lineNumber": 316,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/referee-roles/remove - Remove role from referee (admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/user/:userId",
      "lineNumber": 346,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_referee_roles",
        "referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referee-roles/user/:userId - Get roles for specific user"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/permissions/summary",
      "lineNumber": 415,
      "file": "backend\\src\\routes\\referee-roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referee-roles/permissions/summary - Get permissions summary for all roles"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referee-roles",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/test",
      "lineNumber": 49,
      "file": "backend\\src\\routes\\referees.bridge.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Initialize services with database connection",
        "Add the original route implementations here as fallback",
        "This ensures the system continues to work during the migration",
        "GET /api/referees/test - Simple test endpoint"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees.bridge",
      "fileDescription": "JavaScript Bridge for TypeScript Referees Routes"
    },
    {
      "method": "GET",
      "path": "/test",
      "lineNumber": 118,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee",
        "wage"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Initialize services",
        "Route initialization function (kept for backwards compatibility)",
        "GET /api/referees/test - Simple test endpoint"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 154,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee",
        "wage",
        "your",
        "const"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Use RefereeService to get paginated profiles with enhanced data",
        "GET /api/referees/:id - Get specific referee with enhanced profile data"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 213,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "game_assignments",
        "referee",
        "wage",
        "your",
        "const",
        "availability"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/referees/:id - Update referee (admin can update wage, referees cannot)"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PATCH",
      "path": "/:id/availability",
      "lineNumber": 258,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "game_assignments",
        "const",
        "referee",
        "availability"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Use UserService to update referee",
        "PATCH /api/referees/:id/availability - Update referee availability"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/available/:gameId",
      "lineNumber": 275,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "game_assignments",
        "referee",
        "availability"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Use UserService to update availability",
        "GET /api/referees/available/:gameId - Get available referees for a specific game"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PATCH",
      "path": "/:id/level",
      "lineNumber": 310,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments",
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PATCH /api/referees/:id/level - Update referee level"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PATCH",
      "path": "/:id/roles",
      "lineNumber": 348,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PATCH /api/referees/:id/roles - Manage referee roles"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/:id/white-whistle-status",
      "lineNumber": 406,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referees/:id/white-whistle-status - Get white whistle display status"
      ],
      "hasValidation": true,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 440,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_referee_roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "DELETE /api/referees/:id - Delete referee"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/levels/summary",
      "lineNumber": 469,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users",
        "user_referee_roles",
        "individual"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referees/levels/summary - Get summary of referee levels"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/:id/profile",
      "lineNumber": 538,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "individual"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "===== NEW ENHANCED REFEREE SYSTEM ENDPOINTS =====",
        "GET /api/referees/:id/profile - Get complete referee profile"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:id/wage",
      "lineNumber": 558,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "individual"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/referees/:id/wage - Update individual referee wage"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:id/type",
      "lineNumber": 581,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/referees/:id/type - Change referee type (role reassignment)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/types",
      "lineNumber": 614,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles",
        "user_roles",
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referees/types - Get available referee types with configurations"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/capabilities",
      "lineNumber": 628,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles",
        "user_roles",
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/referees/capabilities - Get available referee capabilities"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/:id/profile",
      "lineNumber": 642,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "roles",
        "user_roles",
        "referee"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/referees/:id/profile - Create referee profile (when assigning referee role)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "PATCH",
      "path": "/:id/profile",
      "lineNumber": 708,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user_roles",
        "referee",
        "profile"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PATCH /api/referees/:id/profile - Update referee profile"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/:id/white-whistle",
      "lineNumber": 754,
      "file": "backend\\src\\routes\\referees.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "profile"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Update profile",
        "GET /api/referees/:id/white-whistle - Get enhanced white whistle status"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "referees",
      "fileDescription": "Referees Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/referee-performance",
      "lineNumber": 265,
      "file": "backend\\src\\routes\\reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "users"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/reports/referee-performance - Get referee performance metrics",
        "@route GET /api/reports/referee-performance",
        "@access Private (Authenticated users)",
        "@param {PerformanceQueryParams} query - Query parameters for filtering",
        "@returns {RefereePerformanceResponse} Referee performance data with pagination",
        ""
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "reports",
      "fileDescription": "Reports routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/assignment-patterns",
      "lineNumber": 421,
      "file": "backend\\src\\routes\\reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/reports/assignment-patterns - Get assignment pattern analysis",
        "@route GET /api/reports/assignment-patterns",
        "@access Private (Authenticated users)",
        "@param {ReportQueryParams} query - Query parameters for filtering",
        "@returns {AssignmentPatternsResponse} Assignment pattern analysis data",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "reports",
      "fileDescription": "Reports routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/financial-summary",
      "lineNumber": 613,
      "file": "backend\\src\\routes\\reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/reports/financial-summary - Get financial summary report",
        "@route GET /api/reports/financial-summary",
        "@access Private (Admin only)",
        "@param {ReportQueryParams} query - Query parameters for filtering",
        "@returns {FinancialSummaryResponse} Financial summary data with breakdowns",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "reports",
      "fileDescription": "Reports routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/availability-gaps",
      "lineNumber": 817,
      "file": "backend\\src\\routes\\reports.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/reports/availability-gaps - Get availability gap analysis",
        "@route GET /api/reports/availability-gaps",
        "@access Private (Authenticated users)",
        "@param {ReportQueryParams} query - Query parameters for filtering",
        "@returns {AvailabilityGapsResponse} Availability gap analysis data",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "reports",
      "fileDescription": "Reports routes with TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/available",
      "lineNumber": 39,
      "file": "backend\\src\\routes\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Schema for role updates",
        "Valid roles in the system",
        "GET /api/roles/available - Get list of available roles"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "roles",
      "fileDescription": ""
    },
    {
      "method": "PUT",
      "path": "/users/:userId",
      "lineNumber": 75,
      "file": "backend\\src\\routes\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user",
        ", "
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/roles/users/:userId - Update user roles (Admin only)"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "roles",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/users/:userId",
      "lineNumber": 134,
      "file": "backend\\src\\routes\\roles.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "user"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/roles/users/:userId - Get user roles"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "roles",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/available",
      "lineNumber": 216,
      "file": "backend\\src\\routes\\self-assignment.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "games",
        "users",
        "game_assignments"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/self-assignment/available - Get games available for self-assignment"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "self-assignment",
      "fileDescription": ""
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 294,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/teams/:id - Get specific team with games"
      ],
      "hasValidation": false,
      "hasPagination": true,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/bulk",
      "lineNumber": 428,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "leagues"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/teams/bulk - Create multiple teams"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/generate",
      "lineNumber": 497,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "teams",
        "team"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/teams/generate - Generate teams with pattern"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 574,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "games",
        "leagues",
        "team"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "PUT /api/teams/:id - Update team"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 617,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "games",
        "leagues"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Invalidate related caches",
        "DELETE /api/teams/:id - Delete team"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "GET",
      "path": "/league/:league_id",
      "lineNumber": 656,
      "file": "backend\\src\\routes\\teams.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "teams",
        "leagues",
        "games"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Invalidate related caches",
        "GET /api/teams/league/:league_id - Get all teams for a specific league"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "teams",
      "fileDescription": "Teams Routes - TypeScript Implementation"
    },
    {
      "method": "POST",
      "path": "/generate",
      "lineNumber": 131,
      "file": "backend\\src\\routes\\tournaments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [
        "leagues",
        "teams"
      ],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/tournaments/generate - Generate tournament schedule",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "tournaments",
      "fileDescription": "Tournaments routes - TypeScript implementation"
    },
    {
      "method": "POST",
      "path": "/create-games",
      "lineNumber": 265,
      "file": "backend\\src\\routes\\tournaments.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "POST /api/tournaments/create-games - Create actual games from tournament",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "tournaments",
      "fileDescription": "Tournaments routes - TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/formats",
      "lineNumber": 344,
      "file": "backend\\src\\routes\\tournaments.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/tournaments/formats - Get available tournament formats",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "tournaments",
      "fileDescription": "Tournaments routes - TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/estimate",
      "lineNumber": 403,
      "file": "backend\\src\\routes\\tournaments.ts",
      "authentication": false,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "GET /api/tournaments/estimate - Estimate tournament requirements",
        ""
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "tournaments",
      "fileDescription": "Tournaments routes - TypeScript implementation"
    },
    {
      "method": "GET",
      "path": "/roles",
      "lineNumber": 295,
      "file": "backend\\src\\routes\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [
        "Soft delete by setting deleted_at timestamp",
        "Route definitions with proper middleware and handlers"
      ],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "users",
      "fileDescription": "User Management Routes"
    },
    {
      "method": "GET",
      "path": "/:id",
      "lineNumber": 314,
      "file": "backend\\src\\routes\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": true,
      "category": "users",
      "fileDescription": "User Management Routes"
    },
    {
      "method": "PUT",
      "path": "/:id",
      "lineNumber": 334,
      "file": "backend\\src\\routes\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "users",
      "fileDescription": "User Management Routes"
    },
    {
      "method": "DELETE",
      "path": "/:id",
      "lineNumber": 345,
      "file": "backend\\src\\routes\\users.ts",
      "authentication": true,
      "cerbosPermission": null,
      "middleware": [],
      "databaseTables": [],
      "queryParams": [],
      "bodySchema": null,
      "comments": [],
      "hasValidation": false,
      "hasPagination": false,
      "hasFiltering": false,
      "category": "users",
      "fileDescription": "User Management Routes"
    }
  ],
  "databaseTables": {
    "chart_of_accounts": [
      {
        "method": "GET",
        "path": "/chart-of-accounts",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/chart-of-accounts",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "accounting_integrations": [
      {
        "method": "POST",
        "path": "/chart-of-accounts",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "GET",
        "path": "/integrations",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/integrations",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/integrations/:id/test",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "integration": [
      {
        "method": "POST",
        "path": "/integrations",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/integrations/:id/test",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "journal_entries as je": [
      {
        "method": "POST",
        "path": "/integrations/:id/test",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "GET",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "journal_entry_lines as jel": [
      {
        "method": "POST",
        "path": "/integrations/:id/test",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "GET",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "journal_entries": [
      {
        "method": "POST",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "POST",
        "path": "/journal-entries/:id/approve",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "GET",
        "path": "/transactions/:id",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/transactions/:id/status",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "journal_entry_lines": [
      {
        "method": "POST",
        "path": "/journal-entries",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "accounting_sync_logs as asl": [
      {
        "method": "POST",
        "path": "/journal-entries/:id/approve",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      },
      {
        "method": "GET",
        "path": "/sync-logs",
        "file": "backend\\src\\routes\\accounting-integration.ts"
      }
    ],
    "page": [
      {
        "method": "GET",
        "path": "/roles/:roleId/pages",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleId/pages",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "GET",
        "path": "/page-registry",
        "file": "backend\\src\\routes\\admin\\access.ts"
      }
    ],
    "API": [
      {
        "method": "GET",
        "path": "/page-registry",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "GET",
        "path": "/roles/:roleId/apis",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleId/apis",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "GET",
        "path": "/api-registry",
        "file": "backend\\src\\routes\\admin\\access.ts"
      }
    ],
    "feature": [
      {
        "method": "GET",
        "path": "/api-registry",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "GET",
        "path": "/roles/:roleId/features",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleId/features",
        "file": "backend\\src\\routes\\admin\\access.ts"
      }
    ],
    "features": [
      {
        "method": "GET",
        "path": "/roles/:roleId/features",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleId/features",
        "file": "backend\\src\\routes\\admin\\access.ts"
      },
      {
        "method": "GET",
        "path": "/roles/:roleId/scopes",
        "file": "backend\\src\\routes\\admin\\access.ts"
      }
    ],
    "policy": [
      {
        "method": "GET",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "POST",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "DELETE",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      }
    ],
    "a": [
      {
        "method": "GET",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "POST",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      }
    ],
    "permission": [
      {
        "method": "GET",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "POST",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      }
    ],
    "const": [
      {
        "method": "POST",
        "path": "/roles",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "POST",
        "path": "/:id/versions",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "GET",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      },
      {
        "method": "PUT",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/availability",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "the": [
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\game-fees.ts"
      }
    ],
    "role": [
      {
        "method": "PUT",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "DELETE",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "GET",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:roleId/users",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PATCH",
        "path": "/:roleId/status",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "GET",
        "path": "/:roleId/hierarchy",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      }
    ],
    ", ": [
      {
        "method": "DELETE",
        "path": "/roles/:roleName",
        "file": "backend\\src\\routes\\admin\\cerbos-policies.ts"
      },
      {
        "method": "GET",
        "path": "/scan-history",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "POST",
        "path": "/export-config",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "GET",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/maintenance",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "PUT",
        "path": "/maintenance/:maintenanceId",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/check-page-access",
        "file": "backend\\src\\routes\\auth.ts"
      },
      {
        "method": "GET",
        "path": "/resources/:kind",
        "file": "backend\\src\\routes\\cerbos.ts"
      },
      {
        "method": "POST",
        "path": "/resources",
        "file": "backend\\src\\routes\\cerbos.ts"
      },
      {
        "method": "PUT",
        "path": "/resources/:kind",
        "file": "backend\\src\\routes\\cerbos.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/training/:trainingId",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/stats/overview",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/referee-payments",
        "file": "backend\\src\\routes\\financial-dashboard.ts"
      },
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/:refereeId/assign",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "GET",
        "path": "/check-assignment/:gameId/:refereeId",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "GET",
        "path": "/available",
        "file": "backend\\src\\routes\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/users/:userId",
        "file": "backend\\src\\routes\\roles.ts"
      }
    ],
    "rbac_page_permissions": [
      {
        "method": "POST",
        "path": "/configure",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "POST",
        "path": "/auto-configure",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "rbac_api_permissions": [
      {
        "method": "POST",
        "path": "/auto-configure",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "rbac_scan_history": [
      {
        "method": "POST",
        "path": "/auto-configure",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "GET",
        "path": "/scan-history",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "\\n": [
      {
        "method": "GET",
        "path": "/scan-history",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "POST",
        "path": "/export-config",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "rbac_pages": [
      {
        "method": "POST",
        "path": "/export-config",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "DELETE",
        "path": "/clear-configured",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "rbac_endpoints": [
      {
        "method": "POST",
        "path": "/export-config",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "DELETE",
        "path": "/clear-configured",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "rbac_functions": [
      {
        "method": "POST",
        "path": "/export-config",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      },
      {
        "method": "DELETE",
        "path": "/clear-configured",
        "file": "backend\\src\\routes\\admin\\rbac-registry.ts"
      }
    ],
    "Cerbos": [
      {
        "method": "GET",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "POST",
        "path": "/:roleId/permissions",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      }
    ],
    "or": [
      {
        "method": "GET",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      }
    ],
    "database": [
      {
        "method": "DELETE",
        "path": "/:roleId",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "POST",
        "path": "/:roleId/permissions",
        "file": "backend\\src\\routes\\admin\\roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      }
    ],
    "roles": [
      {
        "method": "GET",
        "path": "/test",
        "file": "backend\\src\\routes\\admin\\test-roles.ts"
      },
      {
        "method": "GET",
        "path": "/public-test",
        "file": "backend\\src\\routes\\admin\\test-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "PUT",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "POST",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/type",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/types",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/capabilities",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "permissions": [
      {
        "method": "GET",
        "path": "/test",
        "file": "backend\\src\\routes\\admin\\test-roles.ts"
      },
      {
        "method": "GET",
        "path": "/public-test",
        "file": "backend\\src\\routes\\admin\\test-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      }
    ],
    "role_pages": [
      {
        "method": "GET",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      }
    ],
    "existing": [
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:id/notes",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "POST",
        "path": "/:id/notes",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/notes/:noteId",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "GET",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      },
      {
        "method": "PUT",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      }
    ],
    "pages": [
      {
        "method": "PUT",
        "path": "/:name",
        "file": "backend\\src\\routes\\admin\\unified-roles.ts"
      }
    ],
    "user_roles": [
      {
        "method": "GET",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "PUT",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "POST",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "DELETE",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "POST",
        "path": "/login",
        "file": "backend\\src\\routes\\auth.ts"
      },
      {
        "method": "POST",
        "path": "/register",
        "file": "backend\\src\\routes\\auth.ts"
      },
      {
        "method": "GET",
        "path": "/me",
        "file": "backend\\src\\routes\\auth.ts"
      },
      {
        "method": "POST",
        "path": "/refresh-permissions",
        "file": "backend\\src\\routes\\auth.ts"
      },
      {
        "method": "GET",
        "path": "/my-mentees",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "GET",
        "path": "/types",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/capabilities",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "users": [
      {
        "method": "GET",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "PUT",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "POST",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "DELETE",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id/partner-preferences/:prefId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/run",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/referees/:id/calendar/ical",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "GET",
        "path": "/:token",
        "file": "backend\\src\\routes\\invitations.ts"
      },
      {
        "method": "POST",
        "path": "/:token/complete",
        "file": "backend\\src\\routes\\invitations.ts"
      },
      {
        "method": "GET",
        "path": "/:locationId/distance",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/admin/distance-stats",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "POST",
        "path": "/admin/calculate-user-distances/:userId",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/:id/games",
        "file": "backend\\src\\routes\\mentee-games.ts"
      },
      {
        "method": "POST",
        "path": "/assign",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "POST",
        "path": "/remove",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/user/:userId",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:id/white-whistle-status",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/levels/summary",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/referee-performance",
        "file": "backend\\src\\routes\\reports.ts"
      },
      {
        "method": "GET",
        "path": "/available",
        "file": "backend\\src\\routes\\self-assignment.ts"
      }
    ],
    "user": [
      {
        "method": "PUT",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "POST",
        "path": "/:userId/roles",
        "file": "backend\\src\\routes\\admin\\users.ts"
      },
      {
        "method": "GET",
        "path": "/available",
        "file": "backend\\src\\routes\\roles.ts"
      },
      {
        "method": "PUT",
        "path": "/users/:userId",
        "file": "backend\\src\\routes\\roles.ts"
      },
      {
        "method": "GET",
        "path": "/users/:userId",
        "file": "backend\\src\\routes\\roles.ts"
      }
    ],
    "ai_assignment_partner_preferences": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/partner-preferences",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id/partner-preferences/:prefId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      }
    ],
    "ai_assignment_rules": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id/partner-preferences/:prefId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/run",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/:id/runs",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/runs/:runId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/toggle",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/analytics",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      }
    ],
    "rule": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      }
    ],
    "data": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "AI": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/partner-preferences",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      }
    ],
    "games": [
      {
        "method": "DELETE",
        "path": "/:id/partner-preferences/:prefId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/run",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/games/calendar-feed",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "GET",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "GET",
        "path": "/options/filters",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "PUT",
        "path": "/:refereeId/assign",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "GET",
        "path": "/check-assignment/:gameId/:refereeId",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/availability",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/available/:gameId",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/availability-gaps",
        "file": "backend\\src\\routes\\reports.ts"
      },
      {
        "method": "GET",
        "path": "/available",
        "file": "backend\\src\\routes\\self-assignment.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "GET",
        "path": "/league/:league_id",
        "file": "backend\\src\\routes\\teams.ts"
      }
    ],
    "ai_assignment_rule_runs": [
      {
        "method": "POST",
        "path": "/:id/run",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/:id/runs",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/runs/:runId",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "POST",
        "path": "/:id/toggle",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      },
      {
        "method": "GET",
        "path": "/analytics",
        "file": "backend\\src\\routes\\ai-assignment-rules.ts"
      }
    ],
    "game_assignments": [
      {
        "method": "PUT",
        "path": "/:id/accept",
        "file": "backend\\src\\routes\\ai-suggestions.ts"
      },
      {
        "method": "GET",
        "path": "/referees/:id/calendar/ical",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "GET",
        "path": "/games/calendar-feed",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/apply",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      },
      {
        "method": "POST",
        "path": "/analyze",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/availability",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/available/:gameId",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/level",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/assignment-patterns",
        "file": "backend\\src\\routes\\reports.ts"
      },
      {
        "method": "GET",
        "path": "/financial-summary",
        "file": "backend\\src\\routes\\reports.ts"
      },
      {
        "method": "GET",
        "path": "/available",
        "file": "backend\\src\\routes\\self-assignment.ts"
      }
    ],
    "suggestion": [
      {
        "method": "PUT",
        "path": "/:id/accept",
        "file": "backend\\src\\routes\\ai-suggestions.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/reject",
        "file": "backend\\src\\routes\\ai-suggestions.ts"
      }
    ],
    "ai_suggestions": [
      {
        "method": "PUT",
        "path": "/:id/accept",
        "file": "backend\\src\\routes\\ai-suggestions.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/reject",
        "file": "backend\\src\\routes\\ai-suggestions.ts"
      }
    ],
    "assets": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/checkout",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/checkout/:checkoutId/checkin",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "GET",
        "path": "/stats/overview",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "asset": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/checkout",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/checkout/:checkoutId/checkin",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "GET",
        "path": "/stats/overview",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "asset_maintenance": [
      {
        "method": "GET",
        "path": "/:id/maintenance",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/maintenance",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "PUT",
        "path": "/maintenance/:maintenanceId",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "maintenance": [
      {
        "method": "GET",
        "path": "/:id/maintenance",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/maintenance",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "PUT",
        "path": "/maintenance/:maintenanceId",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "asset_checkouts": [
      {
        "method": "POST",
        "path": "/:id/checkout",
        "file": "backend\\src\\routes\\assets.ts"
      },
      {
        "method": "POST",
        "path": "/checkout/:checkoutId/checkin",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "checkout": [
      {
        "method": "POST",
        "path": "/checkout/:checkoutId/checkin",
        "file": "backend\\src\\routes\\assets.ts"
      }
    ],
    "referee_availability": [
      {
        "method": "GET",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "POST",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "DELETE",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/conflicts",
        "file": "backend\\src\\routes\\availability.ts"
      }
    ],
    "referees": [
      {
        "method": "GET",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "POST",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/conflicts",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:refereeId/assign",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "GET",
        "path": "/check-assignment/:gameId/:refereeId",
        "file": "backend\\src\\routes\\referee-levels.ts"
      }
    ],
    "availability": [
      {
        "method": "GET",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "POST",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/availability",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/available/:gameId",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "your": [
      {
        "method": "POST",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "window": [
      {
        "method": "POST",
        "path": "/referees/:id",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "PUT",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "DELETE",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      }
    ],
    "referee_availability as ra": [
      {
        "method": "PUT",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "DELETE",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/conflicts",
        "file": "backend\\src\\routes\\availability.ts"
      }
    ],
    "game_assignments as ga": [
      {
        "method": "DELETE",
        "path": "/:windowId",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/conflicts",
        "file": "backend\\src\\routes\\availability.ts"
      },
      {
        "method": "GET",
        "path": "/utilization",
        "file": "backend\\src\\routes\\budget-tracker.ts"
      },
      {
        "method": "GET",
        "path": "/payroll-summary",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/:id/games/analytics",
        "file": "backend\\src\\routes\\mentee-games.ts"
      }
    ],
    "expense_data as ed": [
      {
        "method": "GET",
        "path": "/utilization",
        "file": "backend\\src\\routes\\budget-tracker.ts"
      }
    ],
    "budget_periods": [
      {
        "method": "GET",
        "path": "/periods",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/periods",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/allocations",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/periods/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      }
    ],
    "budget_categories": [
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/categories",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/periods/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/categories/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      }
    ],
    "budgets": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/allocations",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/periods/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/categories/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/transactions/:id/status",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/dashboard",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "error": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/allocations",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "GET",
        "path": "/:id/transactions",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "PUT",
        "path": "/transactions/:id/status",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "budget": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/:id/allocations",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "budget_allocations": [
      {
        "method": "POST",
        "path": "/:id/allocations",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/categories/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\budgets.ts"
      }
    ],
    "organization_settings": [
      {
        "method": "POST",
        "path": "/sync",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "GET",
        "path": "/sync/status",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "DELETE",
        "path": "/sync",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "GET",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      },
      {
        "method": "PUT",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      }
    ],
    "organization": [
      {
        "method": "POST",
        "path": "/sync",
        "file": "backend\\src\\routes\\calendar.ts"
      },
      {
        "method": "GET",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      },
      {
        "method": "PUT",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      }
    ],
    "resource": [
      {
        "method": "POST",
        "path": "/resources",
        "file": "backend\\src\\routes\\cerbos.ts"
      },
      {
        "method": "PUT",
        "path": "/resources/:kind",
        "file": "backend\\src\\routes\\cerbos.ts"
      },
      {
        "method": "DELETE",
        "path": "/resources/:kind",
        "file": "backend\\src\\routes\\cerbos.ts"
      }
    ],
    "game_chunks": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/auto-create",
        "file": "backend\\src\\routes\\chunks.ts"
      }
    ],
    "chunk_games": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/auto-create",
        "file": "backend\\src\\routes\\chunks.ts"
      }
    ],
    "chunk": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\chunks.ts"
      }
    ],
    "basic": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\chunks.ts"
      }
    ],
    "communication": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\communications.ts"
      }
    ],
    "company_credit_cards": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "GET",
        "path": "/:id/transactions",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "POST",
        "path": "/:id/block",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "POST",
        "path": "/:id/unblock",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      }
    ],
    "credit": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "GET",
        "path": "/:id/transactions",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      }
    ],
    "expense_data": [
      {
        "method": "GET",
        "path": "/:id/transactions",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "POST",
        "path": "/:id/reject",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "GET",
        "path": "/:id/expenses",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "card": [
      {
        "method": "POST",
        "path": "/:id/assign",
        "file": "backend\\src\\routes\\company-credit-cards.ts"
      }
    ],
    "content_items": [
      {
        "method": "GET",
        "path": "/items",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/items/slug/:slug",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "POST",
        "path": "/items",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "PUT",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "DELETE",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/items/slug/:slug",
        "file": "backend\\src\\routes\\content.ts"
      }
    ],
    "content_categories": [
      {
        "method": "GET",
        "path": "/items/slug/:slug",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "POST",
        "path": "/items",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "PUT",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "DELETE",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/items/slug/:slug",
        "file": "backend\\src\\routes\\content.ts"
      },
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\content.ts"
      }
    ],
    "content": [
      {
        "method": "PUT",
        "path": "/items/:id",
        "file": "backend\\src\\routes\\content.ts"
      }
    ],
    "document_versions": [
      {
        "method": "POST",
        "path": "/:id/versions",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "document": [
      {
        "method": "POST",
        "path": "/:id/versions",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "documents": [
      {
        "method": "POST",
        "path": "/:id/versions",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "POST",
        "path": "/:id/archive",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "query": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "event": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\documents.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "document_acknowledgments": [
      {
        "method": "POST",
        "path": "/:id/acknowledge",
        "file": "backend\\src\\routes\\documents.ts"
      }
    ],
    "departments": [
      {
        "method": "GET",
        "path": "/departments",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/departments",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/departments/:id",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "department": [
      {
        "method": "GET",
        "path": "/departments",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/departments",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/departments/:id",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "job_positions": [
      {
        "method": "PUT",
        "path": "/departments/:id",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/positions",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/positions",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "employees": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "employee": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "employee_evaluations": [
      {
        "method": "GET",
        "path": "/:id/evaluations",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/evaluations",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "training_records": [
      {
        "method": "POST",
        "path": "/:id/evaluations",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/training/:trainingId",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "GET",
        "path": "/stats/overview",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "training": [
      {
        "method": "GET",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/training",
        "file": "backend\\src\\routes\\employees.ts"
      },
      {
        "method": "PUT",
        "path": "/training/:trainingId",
        "file": "backend\\src\\routes\\employees.ts"
      }
    ],
    "expense_receipts": [
      {
        "method": "POST",
        "path": "/receipts/upload",
        "file": "backend\\src\\routes\\expenses.ts"
      },
      {
        "method": "GET",
        "path": "/receipts",
        "file": "backend\\src\\routes\\expenses.ts"
      },
      {
        "method": "GET",
        "path": "/receipts/:id",
        "file": "backend\\src\\routes\\expenses.ts"
      },
      {
        "method": "POST",
        "path": "/upload",
        "file": "backend\\src\\routes\\receipts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      }
    ],
    "ai_processing_logs": [
      {
        "method": "GET",
        "path": "/receipts/:id",
        "file": "backend\\src\\routes\\expenses.ts"
      }
    ],
    "budgets as b": [
      {
        "method": "GET",
        "path": "/budget-variance",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      }
    ],
    "financial_transactions": [
      {
        "method": "GET",
        "path": "/cash-flow",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/transactions/:id",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/transactions/:id/status",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/dashboard",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "cash_flow_forecasts": [
      {
        "method": "GET",
        "path": "/cash-flow",
        "file": "backend\\src\\routes\\financial-reports.ts"
      }
    ],
    "financial_transactions as ft": [
      {
        "method": "GET",
        "path": "/cash-flow",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/expense-analysis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      },
      {
        "method": "GET",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/transactions/:id",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/dashboard",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "financial_kpis": [
      {
        "method": "POST",
        "path": "/kpis",
        "file": "backend\\src\\routes\\financial-reports.ts"
      }
    ],
    "vendors": [
      {
        "method": "POST",
        "path": "/transactions",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "POST",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "transaction": [
      {
        "method": "GET",
        "path": "/transactions/:id",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "PUT",
        "path": "/transactions/:id/status",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      },
      {
        "method": "GET",
        "path": "/vendors",
        "file": "backend\\src\\routes\\financial-transactions.ts"
      }
    ],
    "game_fees": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\game-fees.ts"
      },
      {
        "method": "GET",
        "path": "/stats",
        "file": "backend\\src\\routes\\game-fees.ts"
      }
    ],
    "game_fees as gf": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\game-fees.ts"
      },
      {
        "method": "GET",
        "path": "/stats",
        "file": "backend\\src\\routes\\game-fees.ts"
      }
    ],
    "an": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\game-fees.ts"
      }
    ],
    "object": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\game-fees.ts"
      }
    ],
    "game": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\games.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\games.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/status",
        "file": "backend\\src\\routes\\games.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\games.ts"
      },
      {
        "method": "POST",
        "path": "/bulk-import",
        "file": "backend\\src\\routes\\games.ts"
      }
    ],
    "assignment_patterns": [
      {
        "method": "POST",
        "path": "/apply",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      }
    ],
    "pattern": [
      {
        "method": "POST",
        "path": "/apply",
        "file": "backend\\src\\routes\\historic-patterns.ts"
      }
    ],
    "invitations": [
      {
        "method": "GET",
        "path": "/:token",
        "file": "backend\\src\\routes\\invitations.ts"
      },
      {
        "method": "POST",
        "path": "/:token/complete",
        "file": "backend\\src\\routes\\invitations.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\invitations.ts"
      }
    ],
    "leagues": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "GET",
        "path": "/options/filters",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "POST",
        "path": "/generate",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "GET",
        "path": "/league/:league_id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "POST",
        "path": "/generate",
        "file": "backend\\src\\routes\\tournaments.ts"
      }
    ],
    "teams": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "GET",
        "path": "/options/filters",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "POST",
        "path": "/generate",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "GET",
        "path": "/league/:league_id",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "POST",
        "path": "/generate",
        "file": "backend\\src\\routes\\tournaments.ts"
      }
    ],
    "league": [
      {
        "method": "POST",
        "path": "/bulk",
        "file": "backend\\src\\routes\\leagues.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\leagues.ts"
      }
    ],
    "locations": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/distances",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/:locationId/distance",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/admin/distance-stats",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "POST",
        "path": "/admin/calculate-user-distances/:userId",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "POST",
        "path": "/admin/calculate-location-distances/:locationId",
        "file": "backend\\src\\routes\\locations.ts"
      }
    ],
    "location": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      }
    ],
    "user_location_distances": [
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/distances",
        "file": "backend\\src\\routes\\locations.ts"
      },
      {
        "method": "GET",
        "path": "/:locationId/distance",
        "file": "backend\\src\\routes\\locations.ts"
      }
    ],
    "mentorship": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "their": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "any": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "method": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "this": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "POST",
        "path": "/:id/notes",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/notes/:noteId",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id/notes/:noteId",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "note": [
      {
        "method": "POST",
        "path": "/:id/notes",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/notes/:noteId",
        "file": "backend\\src\\routes\\mentorships.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id/notes/:noteId",
        "file": "backend\\src\\routes\\mentorships.ts"
      }
    ],
    "clearSettingsCache": [
      {
        "method": "PUT",
        "path": "/settings",
        "file": "backend\\src\\routes\\organization.ts"
      }
    ],
    "payment_methods": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "GET",
        "path": "/:id/rules",
        "file": "backend\\src\\routes\\payment-methods.ts"
      }
    ],
    "payment": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\payment-methods.ts"
      }
    ],
    "post_categories": [
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      }
    ],
    "posts": [
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "POST",
        "path": "/:id/media",
        "file": "backend\\src\\routes\\posts.ts"
      }
    ],
    "post_media": [
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "POST",
        "path": "/:id/media",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id/reads",
        "file": "backend\\src\\routes\\posts.ts"
      }
    ],
    "post_reads": [
      {
        "method": "GET",
        "path": "/categories",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "POST",
        "path": "/:id/media",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "GET",
        "path": "/:id/reads",
        "file": "backend\\src\\routes\\posts.ts"
      }
    ],
    "post": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\posts.ts"
      }
    ],
    "purchase_orders": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "POST",
        "path": "/:id/reject",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "GET",
        "path": "/:id/expenses",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "purchase": [
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      },
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "approval": [
      {
        "method": "POST",
        "path": "/:id/approve",
        "file": "backend\\src\\routes\\purchase-orders.ts"
      }
    ],
    "expense_receipts as r": [
      {
        "method": "POST",
        "path": "/upload",
        "file": "backend\\src\\routes\\receipts.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      }
    ],
    "status": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      }
    ],
    "with": [
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\receipts.ts"
      }
    ],
    "referee_levels": [
      {
        "method": "PUT",
        "path": "/:refereeId/assign",
        "file": "backend\\src\\routes\\referee-levels.ts"
      }
    ],
    "referee": [
      {
        "method": "PUT",
        "path": "/:refereeId/assign",
        "file": "backend\\src\\routes\\referee-levels.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/test",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/availability",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/available/:gameId",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/level",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/roles",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/types",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/capabilities",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "POST",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PATCH",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "referee_roles": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "POST",
        "path": "/assign",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/user/:userId",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/permissions/summary",
        "file": "backend\\src\\routes\\referee-roles.ts"
      }
    ],
    "user_referee_roles": [
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "POST",
        "path": "/assign",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "POST",
        "path": "/remove",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/user/:userId",
        "file": "backend\\src\\routes\\referee-roles.ts"
      },
      {
        "method": "GET",
        "path": "/:id/white-whistle-status",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "DELETE",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/levels/summary",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "wage": [
      {
        "method": "GET",
        "path": "/test",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "individual": [
      {
        "method": "GET",
        "path": "/levels/summary",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "PUT",
        "path": "/:id/wage",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "profile": [
      {
        "method": "PATCH",
        "path": "/:id/profile",
        "file": "backend\\src\\routes\\referees.ts"
      },
      {
        "method": "GET",
        "path": "/:id/white-whistle",
        "file": "backend\\src\\routes\\referees.ts"
      }
    ],
    "team": [
      {
        "method": "POST",
        "path": "/generate",
        "file": "backend\\src\\routes\\teams.ts"
      },
      {
        "method": "PUT",
        "path": "/:id",
        "file": "backend\\src\\routes\\teams.ts"
      }
    ]
  },
  "summary": {
    "totalFiles": 75,
    "totalRoutes": 330,
    "routesByMethod": {
      "GET": 160,
      "POST": 82,
      "PUT": 42,
      "DELETE": 36,
      "PATCH": 10
    },
    "routesByCategory": {
      "accounting-integration": 9,
      "admin": 56,
      "ai-assignment-rules": 10,
      "ai-suggestions": 2,
      "assets": 10,
      "assignments": 8,
      "auth": 5,
      "availability": 6,
      "budget-tracker": 2,
      "budgets": 10,
      "calendar": 6,
      "cerbos": 12,
      "chunks": 5,
      "communications": 2,
      "company-credit-cards": 6,
      "content": 8,
      "documents": 10,
      "employees": 13,
      "expenses": 3,
      "financial-dashboard": 1,
      "financial-reports": 7,
      "financial-transactions": 7,
      "game-fees": 2,
      "games": 5,
      "historic-patterns": 4,
      "invitations": 3,
      "leagues": 5,
      "locations": 10,
      "mentee-games": 4,
      "mentorships": 14,
      "notifications": 7,
      "organization": 2,
      "organizational-analytics": 8,
      "payment-methods": 4,
      "posts": 6,
      "purchase-orders": 5,
      "receipts": 3,
      "referee-levels": 2,
      "referee-roles": 7,
      "referees.bridge": 1,
      "referees": 18,
      "reports": 4,
      "roles": 3,
      "self-assignment": 1,
      "teams": 6,
      "tournaments": 4,
      "users": 4
    },
    "databaseTablesCount": 147,
    "filesWithIssues": 0,
    "generatedAt": "2025-10-18T21:33:45.150Z"
  }
}